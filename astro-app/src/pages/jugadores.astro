---
import Layout from '../layouts/Layout.astro';
import SectionHeader from '../components/SectionHeader.astro';
import PlayerRow from '../components/PlayerRow.astro';
import type { Jugador } from '../types/index';
---

<Layout title="Gestión de Jugadores" description="Gestiona los jugadores que participarán en el torneo">
  <div class="space-y-8">
    <SectionHeader
      title="Gestión de Jugadores"
      subtitle="Administra los jugadores que participarán en el torneo FIFA Xtreame 2025"
    />

    <!-- Estadísticas de jugadores -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <div class="bg-gradient-to-r from-blue-600 to-blue-700 rounded-xl p-6 text-white">
        <h3 class="text-lg font-semibold mb-2">Total Jugadores</h3>
        <p class="text-3xl font-bold" id="total-jugadores">0</p>
      </div>
      <div class="bg-gradient-to-r from-green-600 to-green-700 rounded-xl p-6 text-white">
        <h3 class="text-lg font-semibold mb-2">Sin Equipo</h3>
        <p class="text-3xl font-bold" id="sin-equipo">0</p>
      </div>
      <div class="bg-gradient-to-r from-purple-600 to-purple-700 rounded-xl p-6 text-white">
        <h3 class="text-lg font-semibold mb-2">Con Equipo</h3>
        <p class="text-3xl font-bold" id="con-equipo">0</p>
      </div>
    </div>

    <!-- Botón de migración -->
    <div class="bg-yellow-600/20 border border-yellow-600/50 rounded-xl p-4">
      <div class="flex items-center justify-between">
        <div>
          <h3 class="text-yellow-400 font-semibold">Migración a Base de Datos</h3>
          <p class="text-gray-300 text-sm">Si tienes datos guardados localmente, puedes migrarlos a la base de datos</p>
        </div>
        <button
          id="btn-migrar-db"
          class="px-4 py-2 bg-yellow-600 hover:bg-yellow-700 text-white rounded-lg transition-colors"
        >
          Migrar Datos
        </button>
      </div>
    </div>

    <!-- Formulario para agregar jugador -->
    <div class="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50 shadow-lg">
      <h2 class="text-2xl font-bold mb-6 text-white">Agregar Nuevo Jugador</h2>
      <form id="form-agregar-jugador" class="space-y-4">
        <div class="grid grid-cols-1 gap-4">
          <div>
            <label for="nombre" class="block text-sm font-medium text-gray-300 mb-2">
              Nombre del Jugador
            </label>
            <input
              type="text"
              id="nombre"
              name="nombre"
              required
              class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Ej: Juan Pérez"
            />
          </div>
        </div>
        <div class="flex justify-end">
          <button
            type="submit"
            class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors transform hover:scale-105"
          >
            Agregar Jugador
          </button>
        </div>
      </form>
    </div>

    <!-- Lista de jugadores -->
    <div class="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50 shadow-lg">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-white">Lista de Jugadores</h2>
        <div class="flex space-x-2">
          <button
            id="btn-resetear-equipos"
            class="px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded-lg transition-colors transform hover:scale-105"
          >
            Resetear Equipos
          </button>
          <button
            id="btn-eliminar-todos"
            class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors transform hover:scale-105"
          >
            Eliminar Todos
          </button>
        </div>
      </div>

      <!-- Filtros -->
      <div class="mb-6 flex flex-wrap gap-4">
        <div>
          <label for="filtro-equipo" class="block text-sm font-medium text-gray-300 mb-2">
            Filtrar por Equipo
          </label>
          <select
            id="filtro-equipo"
            class="px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="">Todos los equipos</option>
            <option value="sin-equipo">Sin equipo asignado</option>
            <option value="con-equipo">Con equipo asignado</option>
          </select>
        </div>
        <div>
          <label for="buscar-jugador" class="block text-sm font-medium text-gray-300 mb-2">
            Buscar Jugador
          </label>
          <input
            type="text"
            id="buscar-jugador"
            placeholder="Buscar por nombre..."
            class="px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
      </div>

      <!-- Tabla de jugadores -->
      <div class="overflow-x-auto rounded-lg border border-gray-700">
        <table class="w-full table-auto">
          <thead class="bg-gray-900/80">
            <tr>
              <th class="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">#</th>
              <th class="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Nombre</th>
              <th class="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Equipo Asignado</th>
              <th class="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Estado</th>
              <th class="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Acciones</th>
            </tr>
          </thead>
          <tbody id="tabla-jugadores" class="bg-gray-800/30 divide-y divide-gray-700">
            <!-- Los jugadores se cargarán dinámicamente -->
          </tbody>
        </table>
      </div>

      <div id="mensaje-sin-jugadores" class="text-center py-8 text-gray-400 hidden">
        <p>No hay jugadores registrados. Agrega jugadores para comenzar el torneo.</p>
      </div>
    </div>

    <!-- Acciones rápidas -->
    <div class="bg-gradient-to-r from-purple-600 to-blue-600 rounded-xl p-6 text-white">
      <h3 class="text-xl font-bold mb-4">Acciones Rápidas</h3>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <a
          href="/sorteo"
          class="block px-4 py-3 bg-white bg-opacity-20 hover:bg-opacity-30 rounded-lg text-center transition-all duration-300"
        >
          🎲 Ir al Sorteo
        </a>
        <button
          id="btn-asignar-aleatorio"
          class="px-4 py-3 bg-white bg-opacity-20 hover:bg-opacity-30 rounded-lg transition-all duration-300"
        >
          🎯 Asignación Aleatoria
        </button>
        <button
          id="btn-exportar-jugadores"
          class="px-4 py-3 bg-white bg-opacity-20 hover:bg-opacity-30 rounded-lg transition-all duration-300"
        >
          📊 Exportar Lista
        </button>
      </div>
    </div>
  </div>

  <!-- Modal para editar jugador -->
  <div id="modal-editar" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-gray-800 rounded-xl p-6 w-full max-w-md border border-gray-700">
        <h3 class="text-xl font-bold mb-4 text-white">Editar Jugador</h3>
        <form id="form-editar-jugador" class="space-y-4">
          <input type="hidden" id="editar-id" name="id" />
          <div>
            <label for="editar-nombre" class="block text-sm font-medium text-gray-300 mb-2">
              Nombre
            </label>
            <input
              type="text"
              id="editar-nombre"
              name="nombre"
              required
              class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <div class="flex justify-end space-x-2">
            <button
              type="button"
              id="btn-cancelar-editar"
              class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors transform hover:scale-105"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors transform hover:scale-105"
            >
              Guardar
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</Layout>

<script>
  import type { Jugador } from '../types/index';

  class GestorJugadores {
    private jugadores: Jugador[] = [];
    private equiposDisponibles = [
      'argentina', 'brasil', 'espana', 'francia', 'alemania', 'italia',
      'holanda', 'belgica', 'inglaterra', 'barcelona', 'real-madrid',
      'man-city', 'liverpool', 'bayern', 'psg', 'juventus', 'milan',
      'inter', 'atletico', 'arsenal', 'chelsea', 'dortmund'
    ];

    constructor() {
      this.inicializarEventos();
      this.cargarJugadores().then(() => {
        this.renderizarJugadores();
        this.actualizarEstadisticas();
      });
    }

    private async cargarJugadores(): Promise<void> {
      console.log('🔄 Cargando jugadores desde la base de datos...');
      
      try {
        // Intentar cargar desde la base de datos
        const response = await fetch('/api/configuraciones?action=obtener&clave=jugadores');
        
        if (response.ok) {
          const result = await response.json();
          const jugadoresFromDB = result.data || [];
          console.log('📋 Jugadores cargados desde DB:', jugadoresFromDB);
          this.jugadores = jugadoresFromDB;
        } else {
          console.warn('⚠️ No se pudieron cargar jugadores desde DB, iniciando con lista vacía');
          // Verificar si hay datos en localStorage para migrar
          const fromLocalStorage = JSON.parse(localStorage.getItem('jugadores') || '[]');
          if (fromLocalStorage.length > 0) {
            console.log('💾 Datos encontrados en localStorage, considera migrar:', fromLocalStorage);
            this.jugadores = fromLocalStorage;
          } else {
            this.jugadores = [];
          }
        }
      } catch (error) {
        console.error('❌ Error al cargar jugadores:', error);
        // Verificar si hay datos en localStorage para migrar
        const fromLocalStorage = JSON.parse(localStorage.getItem('jugadores') || '[]');
        if (fromLocalStorage.length > 0) {
          console.log('💾 Datos encontrados en localStorage, considera migrar:', fromLocalStorage);
          this.jugadores = fromLocalStorage;
        } else {
          this.jugadores = [];
        }
      }
      
      console.log('✅ Jugadores finales cargados:', this.jugadores);
    }

    private async guardarJugadores(): Promise<void> {
      try {
        const response = await fetch('/api/configuraciones', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ 
            action: 'guardar', 
            clave: 'jugadores', 
            valor: this.jugadores 
          })
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          console.error('❌ Error al guardar jugadores en DB:', errorData);
          // Mantener en localStorage como backup en caso de error
          localStorage.setItem('jugadores', JSON.stringify(this.jugadores));
        } else {
          console.log('✅ Jugadores guardados en DB exitosamente');
          // Limpiar localStorage ya que se guardó en DB
          localStorage.removeItem('jugadores');
        }
      } catch (error) {
        console.error('Error al guardar jugadores en DB:', error);
      }
    }

    private inicializarEventos(): void {
      // Formulario agregar jugador
      const formAgregar = document.getElementById('form-agregar-jugador') as HTMLFormElement;
      formAgregar?.addEventListener('submit', (e) => this.agregarJugador(e));

      // Formulario editar jugador
      const formEditar = document.getElementById('form-editar-jugador') as HTMLFormElement;
      formEditar?.addEventListener('submit', (e) => this.editarJugador(e));

      // Botones de acción
      document.getElementById('btn-resetear-equipos')?.addEventListener('click', () => this.resetearEquipos());
      document.getElementById('btn-eliminar-todos')?.addEventListener('click', () => this.eliminarTodos());
      document.getElementById('btn-asignar-aleatorio')?.addEventListener('click', () => this.asignacionAleatoria());
      document.getElementById('btn-exportar-jugadores')?.addEventListener('click', () => this.exportarJugadores());

      // Modal
      document.getElementById('btn-cancelar-editar')?.addEventListener('click', () => this.cerrarModal());

      // Filtros
      document.getElementById('filtro-equipo')?.addEventListener('change', () => this.renderizarJugadores());
      document.getElementById('buscar-jugador')?.addEventListener('input', () => this.renderizarJugadores());
    }

    private async agregarJugador(e: Event): Promise<void> {
      e.preventDefault();
      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);
      
      const nuevoJugador = {
        nombre: formData.get('nombre') as string,
        equipo: null,
        goles: 0,
        partidos: 0
      };

      console.log('🔥 Agregando jugador:', nuevoJugador);

      try {
        // Intentar guardar directamente en la base de datos
        const response = await fetch('/api/jugadores', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(nuevoJugador)
        });

        console.log('📡 Response status:', response.status);
        const responseData = await response.json();
        console.log('📡 Response data:', responseData);

        if (response.ok) {
          // Usar el jugador retornado por la API
          this.jugadores.push(responseData);
          this.mostrarNotificacion('Jugador agregado exitosamente', 'success');
          console.log('✅ Jugador agregado exitosamente a la DB');
        } else {
          console.error('❌ Error del servidor:', responseData);
          this.mostrarNotificacion('Error al agregar jugador: ' + responseData.error, 'error');
          return;
        }
      } catch (error) {
        console.error('❌ Error al agregar jugador:', error);
        this.mostrarNotificacion('Error de conexión al agregar jugador', 'error');
        return;
      }

      // Guardar automaticamente después de agregar
      await this.guardarJugadores();
      this.renderizarJugadores();
      this.actualizarEstadisticas();
      form.reset();
    }

    private async editarJugador(e: Event): Promise<void> {
      e.preventDefault();
      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);
      const id = formData.get('id') as string;
      const nuevoNombre = formData.get('nombre') as string;
      
      const jugador = this.jugadores.find(j => j.id === id);
      if (!jugador) {
        this.mostrarNotificacion('Jugador no encontrado', 'error');
        return;
      }

      const nombreAnterior = jugador.nombre;
      jugador.nombre = nuevoNombre;

      try {
        // Actualizar en la base de datos
        const response = await fetch('/api/jugadores', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            id: id,
            nombre: nuevoNombre,
            equipo: jugador.equipo,
            goles: jugador.goles,
            partidos: jugador.partidos
          })
        });

        if (!response.ok) {
          // Si falla, revertir el cambio
          jugador.nombre = nombreAnterior;
          const errorData = await response.json();
          this.mostrarNotificacion('Error al actualizar jugador: ' + errorData.error, 'error');
          return;
        }

        console.log('✅ Jugador actualizado en la DB exitosamente');
        this.mostrarNotificacion('Jugador actualizado exitosamente', 'success');
      } catch (error) {
        // Si falla, revertir el cambio
        jugador.nombre = nombreAnterior;
        console.error('❌ Error al actualizar jugador:', error);
        this.mostrarNotificacion('Error de conexión al actualizar jugador', 'error');
        return;
      }

      // Guardar automaticamente después de actualizar
      await this.guardarJugadores();
      this.renderizarJugadores();
      this.actualizarEstadisticas();
      this.cerrarModal();
    }

    private eliminarJugador(id: string): void {
      if (confirm('¿Estás seguro de que quieres eliminar este jugador?')) {
        this.jugadores = this.jugadores.filter(j => j.id !== id);
        this.guardarJugadores();
        this.renderizarJugadores();
        this.actualizarEstadisticas();
        
        this.mostrarNotificacion('Jugador eliminado exitosamente', 'success');
      }
    }

    public eliminarJugadorPublico(id: string): void {
      this.eliminarJugador(id);
    }

    private resetearEquipos(): void {
      if (confirm('¿Quieres resetear todos los equipos asignados?')) {
        this.jugadores.forEach(jugador => {
          jugador.equipo = null;
        });
        this.guardarJugadores();
        this.renderizarJugadores();
        this.actualizarEstadisticas();
        
        this.mostrarNotificacion('Equipos reseteados exitosamente', 'success');
      }
    }

    private eliminarTodos(): void {
      if (confirm('¿Estás seguro de que quieres eliminar TODOS los jugadores? Esta acción no se puede deshacer.')) {
        this.jugadores = [];
        this.guardarJugadores();
        this.renderizarJugadores();
        this.actualizarEstadisticas();
        
        this.mostrarNotificacion('Todos los jugadores eliminados', 'warning');
      }
    }

    private asignacionAleatoria(): void {
      const jugadoresSinEquipo = this.jugadores.filter(j => !j.equipo);
      if (jugadoresSinEquipo.length === 0) {
        this.mostrarNotificacion('No hay jugadores sin equipo asignado', 'warning');
        return;
      }

      const equiposShuffled = [...this.equiposDisponibles].sort(() => Math.random() - 0.5);
      
      jugadoresSinEquipo.forEach((jugador, index) => {
        jugador.equipo = equiposShuffled[index % equiposShuffled.length];
      });

      this.guardarJugadores();
      this.renderizarJugadores();
      this.actualizarEstadisticas();
      
      this.mostrarNotificacion(`Equipos asignados aleatoriamente a ${jugadoresSinEquipo.length} jugadores`, 'success');
    }

    private exportarJugadores(): void {
      const data = JSON.stringify(this.jugadores, null, 2);
      const blob = new Blob([data], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      
      const a = document.createElement('a');
      a.href = url;
      a.download = `jugadores_${new Date().toISOString().split('T')[0]}.json`;
      a.click();
      
      URL.revokeObjectURL(url);
      this.mostrarNotificacion('Lista de jugadores exportada', 'success');
    }

    private renderizarJugadores(): void {
      const tbody = document.getElementById('tabla-jugadores');
      const mensajeSinJugadores = document.getElementById('mensaje-sin-jugadores');
      
      if (!tbody || !mensajeSinJugadores) return;

      // Aplicar filtros
      let jugadoresFiltrados = [...this.jugadores];
      
      const filtroEquipo = (document.getElementById('filtro-equipo') as HTMLSelectElement)?.value;
      const busqueda = (document.getElementById('buscar-jugador') as HTMLInputElement)?.value.toLowerCase();

      if (filtroEquipo === 'sin-equipo') {
        jugadoresFiltrados = jugadoresFiltrados.filter(j => !j.equipo);
      } else if (filtroEquipo === 'con-equipo') {
        jugadoresFiltrados = jugadoresFiltrados.filter(j => j.equipo);
      }

      if (busqueda) {
        jugadoresFiltrados = jugadoresFiltrados.filter(j => 
          j.nombre.toLowerCase().includes(busqueda)
        );
      }

      if (jugadoresFiltrados.length === 0) {
        tbody.innerHTML = '';
        mensajeSinJugadores.classList.remove('hidden');
        return;
      }

      mensajeSinJugadores.classList.add('hidden');
      
      tbody.innerHTML = jugadoresFiltrados.map((jugador, index) => {
        const equipoTexto = typeof jugador.equipo === 'string' ? jugador.equipo : 
                           jugador.equipo?.nombre || jugador.equipo?.id || '';
        const equipoId = typeof jugador.equipo === 'string' ? jugador.equipo : 
                        jugador.equipo?.id || '';
        const jugadorId = jugador.id || index.toString(); // Fallback por si no hay id
        
        return `
        <tr class="hover:bg-gray-700/50 transition-colors">
          <td class="px-4 py-3 text-gray-300 font-medium">${index + 1}</td>
          <td class="px-4 py-3">
            <div class="text-white font-medium">${jugador.nombre}</div>
          </td>
          <td class="px-4 py-3">
            ${jugador.equipo ? `
              <div class="flex items-center space-x-2">
                <img src="/img/equipos/${equipoId}.png" alt="${equipoTexto}" class="w-6 h-6 object-contain" 
                     onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
                <div class="w-6 h-6 bg-gray-600 rounded flex items-center justify-center text-xs" style="display:none;">⚽</div>
                <span class="text-sm font-medium text-gray-200 capitalize">${equipoTexto.replace('-', ' ')}</span>
              </div>
            ` : '<span class="text-gray-400">Sin asignar</span>'}
          </td>
          <td class="px-4 py-3">
            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
              jugador.equipo 
                ? 'bg-green-600/20 text-green-400 border border-green-600/30' 
                : 'bg-yellow-600/20 text-yellow-400 border border-yellow-600/30'
            }">
              ${jugador.equipo ? 'Con equipo' : 'Sin equipo'}
            </span>
          </td>
          <td class="px-4 py-3">
            <div class="flex space-x-2">
              <button
                onclick="gestorJugadores.abrirModalEditar('${jugadorId}')"
                class="px-3 py-1 text-xs bg-blue-600/20 text-blue-400 border border-blue-600/30 rounded hover:bg-blue-600/30 transition-colors"
              >
                Editar
              </button>
              <button
                onclick="gestorJugadores.eliminarJugadorPublico('${jugadorId}')"
                class="px-3 py-1 text-xs bg-red-600/20 text-red-400 border border-red-600/30 rounded hover:bg-red-600/30 transition-colors"
              >
                Eliminar
              </button>
            </div>
          </td>
        </tr>
      `;
      }).join('');
    }

    private actualizarEstadisticas(): void {
      const total = this.jugadores.length;
      const sinEquipo = this.jugadores.filter(j => !j.equipo).length;
      const conEquipo = total - sinEquipo;

      const totalElement = document.getElementById('total-jugadores');
      const sinEquipoElement = document.getElementById('sin-equipo');
      const conEquipoElement = document.getElementById('con-equipo');

      if (totalElement) totalElement.textContent = total.toString();
      if (sinEquipoElement) sinEquipoElement.textContent = sinEquipo.toString();
      if (conEquipoElement) conEquipoElement.textContent = conEquipo.toString();
    }

    public abrirModalEditar(id: string): void {
      const jugador = this.jugadores.find(j => j.id === id);
      if (!jugador) return;

      const modal = document.getElementById('modal-editar');
      const idInput = document.getElementById('editar-id') as HTMLInputElement;
      const nombreInput = document.getElementById('editar-nombre') as HTMLInputElement;

      if (modal && idInput && nombreInput) {
        idInput.value = jugador.id || '';
        nombreInput.value = jugador.nombre;
        modal.classList.remove('hidden');
      }
    }

    private cerrarModal(): void {
      const modal = document.getElementById('modal-editar');
      modal?.classList.add('hidden');
    }

    private mostrarNotificacion(mensaje: string, tipo: 'success' | 'error' | 'warning'): void {
      const colores = {
        success: 'bg-green-500',
        error: 'bg-red-500',
        warning: 'bg-orange-500'
      };

      const notificacion = document.createElement('div');
      notificacion.className = `fixed top-4 right-4 ${colores[tipo]} text-white px-6 py-3 rounded-lg shadow-lg z-50 transform transition-all duration-300`;
      notificacion.textContent = mensaje;

      document.body.appendChild(notificacion);

      setTimeout(() => {
        notificacion.style.transform = 'translateX(400px)';
        setTimeout(() => {
          document.body.removeChild(notificacion);
        }, 300);
      }, 3000);
    }
  }

  // Inicializar el gestor de jugadores cuando se carga la página
  let gestorJugadores: GestorJugadores;
  
  document.addEventListener('DOMContentLoaded', () => {
    gestorJugadores = new GestorJugadores();
    
    // Botón de migración
    const btnMigrar = document.getElementById('btn-migrar-db') as HTMLButtonElement;
    if (btnMigrar) {
      btnMigrar.addEventListener('click', async () => {
        if (confirm('¿Deseas migrar todos los datos de localStorage a la base de datos? Esto eliminará los datos locales después de la migración exitosa.')) {
          try {
            btnMigrar.textContent = 'Migrando...';
            btnMigrar.disabled = true;
            
            const response = await fetch('/api/configuraciones', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ action: 'migrar' })
            });
            
            if (response.ok) {
              alert('✅ Migración completada exitosamente!');
              // Recargar la página para refrescar datos
              location.reload();
            } else {
              alert('❌ Error en la migración');
            }
          } catch (error) {
            console.error('Error en migración:', error);
            alert('❌ Error en la migración');
          } finally {
            btnMigrar.textContent = 'Migrar Datos';
            btnMigrar.disabled = false;
          }
        }
      });
    }
  });

  // Exponer funciones globalmente para los botones
  (window as any).gestorJugadores = {
    abrirModalEditar: (id: string) => gestorJugadores?.abrirModalEditar(id),
    eliminarJugadorPublico: (id: string) => gestorJugadores?.eliminarJugadorPublico(id)
  };
</script>

<style>
  /* Estilos para mejorar la tabla en tema oscuro */
  .table-auto tbody tr:nth-child(even) {
    background-color: rgba(75, 85, 99, 0.1);
  }
  
  .table-auto tbody tr:hover {
    background-color: rgba(75, 85, 99, 0.3) !important;
  }
  
  /* Mejoras en los botones de acción */
  .table-auto button {
    transition: all 0.2s ease-in-out;
    transform: scale(1);
  }
  
  .table-auto button:hover {
    transform: scale(1.05);
  }
  
  /* Estilos para inputs y selects en tema oscuro */
  input:focus, select:focus {
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
  
  /* Animaciones suaves */
  .transition-colors {
    transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out, color 0.2s ease-in-out;
  }
  
  /* Estados de badges mejorados */
  .badge {
    backdrop-filter: blur(4px);
  }
</style>
