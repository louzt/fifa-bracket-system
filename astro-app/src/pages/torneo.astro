---
import Layout from '../layouts/Layout.astro';
import SectionHeader from '../components/SectionHeader.astro';
---

<Layout title="Torneo Activo - FIFA Tournament" description="Centro de control del torneo activo con grupos y eliminatorias">
  <div class="space-y-8">
    <SectionHeader
      title="🏆 Torneo en Curso"
      subtitle="Centro de control para gestionar partidos de grupos y eliminatorias en tiempo real"
    />

    <!-- Panel de migración y configuración -->
    <div class="bg-yellow-600/20 border border-yellow-600/50 rounded-xl p-4 mb-6">
      <div class="flex items-center justify-between">
        <div>
          <h3 class="text-yellow-400 font-semibold mb-1">🔄 Migración a Base de Datos</h3>
          <p class="text-gray-300 text-sm">Si tienes datos guardados localmente, puedes migrarlos a la base de datos para mejor persistencia</p>
        </div>
        <div class="flex space-x-2">
          <button
            id="btn-verificar-localStorage"
            class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm transition-colors"
          >
            Verificar Datos
          </button>
          <button
            id="btn-migrar-todo"
            class="px-3 py-1 bg-yellow-600 hover:bg-yellow-700 text-white rounded text-sm transition-colors"
          >
            Migrar Todo
          </button>
        </div>
      </div>
    </div>

    <!-- Botón de recargar configuración -->
    <div class="flex justify-end">
      <button id="btn-recargar-config" class="btn btn-secondary">
        🔄 Recargar Configuración
      </button>
    </div>

    <!-- Estado general del torneo -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
      <div class="bg-gradient-to-r from-blue-600 to-blue-700 rounded-xl p-6 text-white">
        <h3 class="text-lg font-semibold mb-2">Fase Actual</h3>
        <p class="text-3xl font-bold" id="fase-actual">Grupos</p>
        <p class="text-blue-200 text-sm mt-1" id="progreso-fase">En progreso</p>
      </div>
      
      <div class="bg-gradient-to-r from-green-600 to-green-700 rounded-xl p-6 text-white">
        <h3 class="text-lg font-semibold mb-2">Partidos Jugados</h3>
        <p class="text-3xl font-bold" id="partidos-jugados">0</p>
        <p class="text-green-200 text-sm mt-1" id="total-partidos">de 0 total</p>
      </div>
      
      <div class="bg-gradient-to-r from-purple-600 to-purple-700 rounded-xl p-6 text-white">
        <h3 class="text-lg font-semibold mb-2">Próximo Partido</h3>
        <p class="text-lg font-bold" id="proximo-partido">-</p>
        <p class="text-purple-200 text-sm mt-1" id="grupo-proximo">-</p>
      </div>
      
      <div class="bg-gradient-to-r from-orange-600 to-orange-700 rounded-xl p-6 text-white">
        <h3 class="text-lg font-semibold mb-2">Clasificados</h3>
        <p class="text-3xl font-bold" id="total-clasificados">0</p>
        <p class="text-orange-200 text-sm mt-1">a eliminatorias</p>
      </div>
    </div>

    <!-- Navegación por pestañas -->
    <div class="bg-gray-800/50 backdrop-blur-sm rounded-xl border border-gray-700/50">
      <div class="flex flex-wrap border-b border-gray-700">
        <button class="tab-button active" data-tab="fase-grupos">
          ⚽ Fase de Grupos
        </button>
        <button class="tab-button" data-tab="clasificacion">
          📊 Clasificación
        </button>
        <button class="tab-button" data-tab="eliminatorias">
          🏆 Eliminatorias
        </button>
        <button class="tab-button" data-tab="estadisticas">
          📈 Estadísticas
        </button>
      </div>

      <!-- Contenido de las pestañas -->
      <!-- Pestaña: Fase de Grupos -->
      <div id="tab-fase-grupos" class="tab-content p-6">
        <div class="space-y-6">
          <div class="flex justify-between items-center">
            <h3 class="text-xl font-bold text-white">⚽ Partidos de Grupos</h3>
            <div class="flex space-x-3">
              <button id="btn-simular-jornada" class="btn btn-primary btn-sm">
                🎲 Simular Jornada
              </button>
              <button id="btn-generar-fixture" class="btn btn-secondary btn-sm">
                📅 Ver Fixture Completo
              </button>
            </div>
          </div>

          <!-- Filtros -->
          <div class="flex flex-wrap gap-4 p-4 bg-gray-900/50 rounded-lg">
            <select id="filtro-grupo" class="input">
              <option value="">Todos los grupos</option>
            </select>
            <select id="filtro-estado" class="input">
              <option value="">Todos los partidos</option>
              <option value="pendiente">Pendientes</option>
              <option value="jugado">Jugados</option>
            </select>
            <select id="filtro-jornada" class="input">
              <option value="">Todas las jornadas</option>
            </select>
          </div>

          <!-- Partidos de grupos -->
          <div id="partidos-grupos" class="space-y-4">
            <!-- Se generará dinámicamente -->
          </div>
        </div>
      </div>

      <!-- Pestaña: Clasificación -->
      <div id="tab-clasificacion" class="tab-content hidden p-6">
        <div class="space-y-6">
          <h3 class="text-xl font-bold text-white">📊 Clasificación por Grupos</h3>
          
          <div id="tablas-clasificacion" class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- Se generará dinámicamente -->
          </div>
        </div>
      </div>

      <!-- Pestaña: Eliminatorias -->
      <div id="tab-eliminatorias" class="tab-content hidden p-6">
        <div class="space-y-6">
          <div class="flex justify-between items-center">
            <h3 class="text-xl font-bold text-white">🏆 Eliminatorias</h3>
            <div class="flex space-x-3">
              <button id="btn-avanzar-fase" class="btn btn-success btn-sm" disabled>
                ⏭️ Avanzar a Eliminatorias
              </button>
              <button id="btn-simular-eliminatoria" class="btn btn-warning btn-sm" disabled>
                🎲 Simular Eliminatoria
              </button>
            </div>
          </div>

          <!-- Bracket de eliminatorias -->
          <div id="bracket-eliminatorias" class="bg-gray-900/50 rounded-lg p-6">
            <div class="text-center text-gray-400">
              <div class="text-4xl mb-4">🏆</div>
              <p>Las eliminatorias comenzarán cuando termine la fase de grupos</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Pestaña: Estadísticas -->
      <div id="tab-estadisticas" class="tab-content hidden p-6">
        <div class="space-y-6">
          <h3 class="text-xl font-bold text-white">📈 Estadísticas del Torneo</h3>
          
          <div class="text-center text-gray-400 py-8">
            <div class="text-4xl mb-4">📊</div>
            <p>Cargando estadísticas...</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal para registrar resultado (Mejorado para Ida y Vuelta) -->
    <div id="modal-resultado" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-gray-800 rounded-xl w-full max-w-4xl mx-4 border border-gray-700 shadow-2xl max-h-[90vh] overflow-y-auto">
          <!-- Header -->
          <div class="flex justify-between items-center p-6 border-b border-gray-700 bg-gradient-to-r from-gray-800 to-gray-900">
            <h3 class="text-2xl font-bold text-white flex items-center">
              <span class="text-3xl mr-3">⚽</span>
              <span class="bg-gradient-to-r from-blue-400 to-green-400 bg-clip-text text-transparent">Registrar Resultado</span>
            </h3>
            <button id="btn-cerrar-modal" class="text-gray-400 hover:text-white transition-colors p-2 rounded-lg hover:bg-gray-700">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>

          <!-- Body -->
          <div class="p-6 space-y-6">
            <!-- Información del partido -->
            <div class="text-center">
              <span id="info-partido" class="bg-blue-600 text-white px-4 py-2 rounded-full text-sm font-medium"></span>
              <div id="tipo-partido-info" class="mt-2 text-sm text-gray-400"></div>
            </div>

            <!-- Selector de partido (Solo visible en ida y vuelta) -->
            <div id="selector-partido" class="hidden">
              <div class="bg-gradient-to-r from-gray-700/40 to-gray-800/40 rounded-2xl p-6 border-2 border-gray-600 shadow-2xl">
                <h4 class="text-xl font-bold text-white mb-4 flex items-center justify-center">
                  🔄 <span class="ml-2">Seleccionar Partido del Cruce</span>
                </h4>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <button id="btn-partido-ida" class="partido-selector-btn group bg-gradient-to-br from-blue-600/20 to-blue-700/30 hover:from-blue-600/40 hover:to-blue-700/50 border-3 border-blue-500/50 hover:border-blue-400 rounded-xl p-6 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-blue-500/30">
                    <div class="text-blue-300 font-bold text-xl mb-2 flex items-center justify-center">
                      🏠 <span class="ml-2">PARTIDO DE IDA</span>
                    </div>
                    <div class="text-sm text-gray-300 mb-3">Local vs Visitante</div>
                    <div id="estado-ida" class="text-xs bg-blue-500/20 text-blue-300 px-3 py-1 rounded-full font-medium">Pendiente</div>
                  </button>
                  <button id="btn-partido-vuelta" class="partido-selector-btn group bg-gradient-to-br from-green-600/20 to-green-700/30 hover:from-green-600/40 hover:to-green-700/50 border-3 border-green-500/50 hover:border-green-400 rounded-xl p-6 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-green-500/30">
                    <div class="text-green-300 font-bold text-xl mb-2 flex items-center justify-center">
                      ✈️ <span class="ml-2">PARTIDO DE VUELTA</span>
                    </div>
                    <div class="text-sm text-gray-300 mb-3">Visitante vs Local</div>
                    <div id="estado-vuelta" class="text-xs bg-green-500/20 text-green-300 px-3 py-1 rounded-full font-medium">Pendiente</div>
                  </button>
                </div>
              </div>
            </div>

            <!-- Formulario del partido actual -->
            <form id="form-resultado" class="space-y-6">
              <!-- Información del partido actual -->
              <div id="info-partido-actual" class="bg-gradient-to-r from-purple-600/20 to-blue-600/20 rounded-xl p-4 border border-purple-500/30">
                <div class="flex items-center justify-center space-x-4 text-center">
                  <div id="partido-actual-tipo" class="text-purple-400 font-bold"></div>
                  <div class="w-2 h-2 bg-purple-400 rounded-full"></div>
                  <div id="partido-actual-descripcion" class="text-gray-300"></div>
                </div>
              </div>

              <!-- Contenedor principal del partido -->
              <div class="bg-gray-700/50 rounded-xl p-6 border border-gray-600">
                <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 items-center">
                  <!-- Jugador Local -->
                  <div class="text-center">
                    <div class="bg-gradient-to-b from-gray-700 to-gray-800 rounded-2xl p-6 mb-4 border-3 border-gray-600 hover:border-blue-500 transition-all duration-300 shadow-xl hover:shadow-blue-500/20 transform hover:-translate-y-1">
                      <div class="relative">
                        <img id="img-local" src="" alt="" class="w-24 h-24 mx-auto mb-4 object-contain rounded-xl shadow-lg border-2 border-gray-600">
                        <div id="local-badge" class="absolute -top-2 -right-2 w-8 h-8 bg-gradient-to-r from-blue-500 to-blue-600 rounded-full flex items-center justify-center text-white text-sm font-bold shadow-lg">🏠</div>
                      </div>
                      <p id="nombre-local" class="text-white font-bold text-xl mb-1"></p>
                      <p id="equipo-local" class="text-blue-400 text-sm uppercase tracking-wide font-medium"></p>
                    </div>
                    <div class="space-y-2">
                      <input type="number" id="goles-local" class="w-24 h-20 text-center text-3xl font-bold rounded-xl bg-gradient-to-b from-gray-800 to-gray-900 border-3 border-gray-600 text-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/30 transition-all duration-200 shadow-lg hover:shadow-blue-500/20" 
                             min="0" max="20" value="0" placeholder="0">
                      <p class="text-gray-400 text-sm font-medium">⚽ Goles</p>
                    </div>
                  </div>

                  <!-- VS y marcador central -->
                  <div class="text-center">
                    <div class="flex flex-col items-center space-y-4">
                      <div class="text-gray-300 text-4xl font-bold tracking-wider animate-pulse">⚔️</div>
                      <div class="text-2xl font-bold text-gradient bg-gradient-to-r from-blue-400 to-green-400 bg-clip-text text-transparent">VS</div>
                      <div class="bg-gradient-to-b from-gray-800 to-gray-900 rounded-2xl p-6 border-3 border-gray-600 shadow-2xl hover:border-yellow-500 transition-all duration-300">
                        <div class="text-4xl font-mono font-bold text-white tracking-wider">
                          <span id="marcador-preview" class="drop-shadow-lg">0 - 0</span>
                        </div>
                        <div class="text-sm text-yellow-400 mt-2 font-medium">🏆 MARCADOR</div>
                      </div>
                    </div>
                  </div>

                  <!-- Jugador Visitante -->
                  <div class="text-center">
                    <div class="bg-gradient-to-b from-gray-700 to-gray-800 rounded-2xl p-6 mb-4 border-3 border-gray-600 hover:border-green-500 transition-all duration-300 shadow-xl hover:shadow-green-500/20 transform hover:-translate-y-1">
                      <div class="relative">
                        <img id="img-visitante" src="" alt="" class="w-24 h-24 mx-auto mb-4 object-contain rounded-xl shadow-lg border-2 border-gray-600">
                        <div id="visitante-badge" class="absolute -top-2 -right-2 w-8 h-8 bg-gradient-to-r from-green-500 to-green-600 rounded-full flex items-center justify-center text-white text-sm font-bold shadow-lg">✈️</div>
                      </div>
                      <p id="nombre-visitante" class="text-white font-bold text-xl mb-1"></p>
                      <p id="equipo-visitante" class="text-green-400 text-sm uppercase tracking-wide font-medium"></p>
                    </div>
                    <div class="space-y-2">
                      <input type="number" id="goles-visitante" class="w-24 h-20 text-center text-3xl font-bold rounded-xl bg-gradient-to-b from-gray-800 to-gray-900 border-3 border-gray-600 text-white focus:border-green-500 focus:ring-4 focus:ring-green-500/30 transition-all duration-200 shadow-lg hover:shadow-green-500/20" 
                             min="0" max="20" value="0" placeholder="0">
                      <p class="text-gray-400 text-sm font-medium">⚽ Goles</p>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Resumen global (Solo en ida y vuelta) -->
              <div id="resumen-global" class="hidden bg-gradient-to-r from-yellow-600/30 to-orange-600/30 rounded-2xl p-6 border-2 border-yellow-500/40 shadow-2xl">
                <h4 class="text-xl font-bold text-yellow-300 mb-6 flex items-center justify-center">
                  📊 <span class="ml-2">Resumen Global del Cruce</span>
                </h4>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div class="text-center bg-blue-600/20 rounded-xl p-4 border border-blue-500/30">
                    <div class="text-3xl font-bold text-blue-300" id="goles-totales-local">0</div>
                    <div class="text-sm text-gray-300 font-medium" id="nombre-total-local">Jugador 1</div>
                    <div class="text-xs text-blue-400 font-bold">⚽ GOLES TOTALES</div>
                  </div>
                  <div class="text-center bg-yellow-600/20 rounded-xl p-4 border border-yellow-500/30">
                    <div class="text-lg text-yellow-300 font-bold mb-2">🏆 RESULTADO GLOBAL</div>
                    <div class="text-2xl font-mono font-bold text-white" id="resultado-global">0 - 0</div>
                    <div class="text-sm font-semibold mt-2" id="estado-ganador">Empate</div>
                  </div>
                  <div class="text-center bg-green-600/20 rounded-xl p-4 border border-green-500/30">
                    <div class="text-3xl font-bold text-green-300" id="goles-totales-visitante">0</div>
                    <div class="text-sm text-gray-300 font-medium" id="nombre-total-visitante">Jugador 2</div>
                    <div class="text-xs text-green-400 font-bold">⚽ GOLES TOTALES</div>
                  </div>
                </div>
              </div>

              <!-- Estado del partido registrado (Solo en ida y vuelta) -->
              <div id="partido-completado" class="hidden bg-gradient-to-r from-green-600/30 to-emerald-600/30 rounded-2xl p-6 border-2 border-green-500/40 shadow-2xl">
                <div class="flex items-center justify-between">
                  <div class="flex items-center space-x-4">
                    <div class="w-12 h-12 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center shadow-lg">
                      <span class="text-white font-bold text-xl">✓</span>
                    </div>
                    <div>
                      <div class="text-green-300 font-bold text-lg">✅ Partido Registrado</div>
                      <div class="text-lg text-white font-semibold" id="resultado-registrado"></div>
                    </div>
                  </div>
                  <button type="button" id="btn-editar-partido" class="bg-gradient-to-r from-orange-600 to-orange-700 hover:from-orange-700 hover:to-orange-800 text-white font-semibold py-2 px-4 rounded-lg transition-all duration-200 flex items-center space-x-2 hover:scale-105 shadow-lg">
                    <span>✏️</span>
                    <span>Editar</span>
                  </button>
                </div>
              </div>
            </form>
          </div>

          <!-- Footer -->
          <div class="flex space-x-3 p-6 border-t border-gray-700 bg-gray-800/50">
            <button type="button" id="btn-cancelar-resultado" class="btn flex-1 bg-gray-600 hover:bg-gray-700 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 flex items-center justify-center space-x-2 hover:scale-105">
              <span>❌</span>
              <span>Cancelar</span>
            </button>
            <button type="button" id="btn-guardar-resultado" class="btn flex-1 bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 flex items-center justify-center space-x-2 hover:scale-105 shadow-lg">
              <span>💾</span>
              <span>Guardar Resultado</span>
            </button>
          </div>
        </div>
      </div>
    </div>
      </div>
    </div>

    <!-- Modal de confirmación -->
    <div id="modal-confirmacion" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-gray-800 rounded-xl p-6 w-full max-w-md mx-4 border border-gray-700">
          <h3 id="modal-titulo" class="text-xl font-bold text-white mb-4"></h3>
          <p id="modal-mensaje" class="text-gray-300 mb-6"></p>
          <div class="flex space-x-3">
            <button id="btn-cancelar-modal" class="btn btn-secondary flex-1">Cancelar</button>
            <button id="btn-confirmar-modal" class="btn btn-primary flex-1">Confirmar</button>
          </div>
        </div>
      </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  interface Jugador {
    id: number;
    nombre: string;
    equipo: string | { id: string; nombre: string };
  }

  interface Partido {
    id?: number;
    grupo: string;
    jornada: number;
    jugadorLocal: string;
    jugadorVisitante: string;
    equipoLocal: string;
    equipoVisitante: string;
    golesLocal?: number;
    golesVisitante?: number;
    jugado?: boolean;
    fecha?: string;
  }

  interface ClasificacionJugador {
    nombre: string;
    equipo: string;
    puntos: number;
    partidos: number;
    ganados: number;
    empatados: number;
    perdidos: number;
    golesFavor: number;
    golesContra: number;
    diferencia: number;
  }

  interface EstadisticaJugador {
    nombre: string;
    equipo: string;
    goles: number;
    golesContra: number;
    partidos: number;
    ganados: number;
    empatados: number;
    perdidos: number;
    promedio: string;
    diferencia: number;
  }

  interface EquipoOfensivo {
    jugador: string;
    equipo: string;
    golesFavor: number;
  }

  interface EquipoDefensivo {
    jugador: string;
    equipo: string;
    golesContra: number;
    promedio: string;
  }

  class TorneoManager {
    private torneoActivo: any = null;
    private partidos: Partido[] = [];
    private jugadores: Jugador[] = [];
    private clasificaciones: { [grupo: string]: ClasificacionJugador[] } = {};
    private partidoSeleccionado: Partido | null = null;
    private partidoIdaActual: Partido | null = null;
    private partidoVueltaActual: Partido | null = null;
    private configTimestamp: number = 0; // Para detectar cambios
    private checkInterval: number | null = null; // Intervalo de verificación
    private statsCalculadas: { [key: string]: any } = {}; // Para el comparador
    private resultadosEliminatorias: { [rondaId: string]: any } = {}; // Para almacenar resultados de eliminatorias

    constructor() {
      this.inicializar();
    }

    private async inicializar(): Promise<void> {
      // Verificar todo el contenido del localStorage para diagnóstico
      console.log('=== CONTENIDO COMPLETO DEL LOCALSTORAGE ===');
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key) {
          const value = localStorage.getItem(key);
          console.log(`${key}:`, value ? value.substring(0, 200) + '...' : 'null');
        }
      }
      console.log('=== FIN CONTENIDO LOCALSTORAGE ===');
      
      await this.cargarJugadores();
      await this.cargarTorneoActivo();
      this.configurarEventos();
      this.configurarPestanas();
      this.actualizarEstadoGeneral();
      this.iniciarVerificacionAutomatica(); // Iniciar verificación automática
    }

    private async cargarJugadores(): Promise<void> {
      try {
        const response = await fetch('/api/jugadores');
        const data = await response.json();
        this.jugadores = data.filter((j: Jugador) => j.equipo);
        console.log('Jugadores cargados:', this.jugadores.length);
      } catch (error) {
        console.error('Error cargando jugadores:', error);
        this.jugadores = [];
      }
    }

    private async cargarTorneoActivo(): Promise<void> {
      console.log('Cargando torneo activo...');
      
      // Primero intentar cargar desde la base de datos
      try {
        const response = await fetch('/api/torneos?action=obtenerActivo');
        if (response.ok) {
          const torneoDb = await response.json();
          
          if (torneoDb) {
            console.log('✅ Torneo cargado desde base de datos:', torneoDb);
            this.torneoActivo = torneoDb;
            this.partidos = torneoDb.partidos || [];
            this.resultadosEliminatorias = torneoDb.resultadosEliminatorias || {};
            
            // Actualizar vista
            this.calcularTodasLasClasificaciones();
            this.actualizarVistaConResultadosEliminatorias();
            this.actualizarVistaGrupos();
            return;
          }
        }
      } catch (error) {
        console.log('⚠️ No se pudo cargar desde base de datos, usando localStorage:', error);
      }
      
      // Fallback a localStorage
      await this.cargarTorneoDesdeLocalStorage();
    }

    private async cargarTorneoDesdeLocalStorage(): Promise<void> {
      // Verificar si hay nueva configuración de grupos
      const configGrupos = localStorage.getItem('gruposConfig');
      const torneoGuardado = localStorage.getItem('torneoActivo');
      
      let debeReinicializar = false;
      
      if (configGrupos) {
        try {
          const config = JSON.parse(configGrupos);
          console.log('Configuración de grupos encontrada:', { 
            timestamp: config.timestamp, 
            grupos: config.grupos?.length 
          });
          
          if (torneoGuardado) {
            const torneo = JSON.parse(torneoGuardado);
            console.log('Torneo existente encontrado:', { 
              timestamp: torneo.timestamp,
              fase: torneo.fase 
            });
            
            // Verificar si el timestamp de la configuración es más reciente que el torneo
            // O si no hay timestamp en el torneo (torneo más antiguo)
            if ((config.timestamp && torneo.timestamp && config.timestamp > torneo.timestamp) ||
                (config.timestamp && !torneo.timestamp)) {
              console.log('Configuración de grupos más reciente detectada, reinicializando torneo...');
              debeReinicializar = true;
            }
          } else {
            console.log('No hay torneo guardado, creando desde configuración de grupos');
            debeReinicializar = true;
          }
        } catch (error) {
          console.error('Error comparando timestamps:', error);
          debeReinicializar = true;
        }
      }
      
      // Cargar desde localStorage o API
      if (torneoGuardado && !debeReinicializar) {
        try {
          this.torneoActivo = JSON.parse(torneoGuardado);
          this.partidos = this.torneoActivo.partidos || [];
          this.resultadosEliminatorias = this.torneoActivo.resultadosEliminatorias || {};
          console.log('Torneo activo cargado:', this.torneoActivo);
          console.log('Partidos cargados:', this.partidos.length);
          console.log('Partidos jugados:', this.partidos.filter(p => p.jugado).length);
          console.log('Primeros 3 partidos:', this.partidos.slice(0, 3));
          
          // Verificar si algún partido tiene goles pero no está marcado como jugado
          const partidosConGoles = this.partidos.filter(p => 
            (p.golesLocal !== undefined && p.golesLocal !== null) || 
            (p.golesVisitante !== undefined && p.golesVisitante !== null)
          );
          console.log('Partidos con goles definidos:', partidosConGoles.length);
          if (partidosConGoles.length > 0) {
            console.log('Ejemplo de partido con goles:', partidosConGoles[0]);
            
            // Corregir partidos que tienen goles pero no están marcados como jugados
            this.partidos.forEach(partido => {
              if ((partido.golesLocal !== undefined && partido.golesLocal !== null && partido.golesLocal >= 0) ||
                  (partido.golesVisitante !== undefined && partido.golesVisitante !== null && partido.golesVisitante >= 0)) {
                if (!partido.jugado) {
                  console.log('Corrigiendo partido:', partido.jugadorLocal, 'vs', partido.jugadorVisitante);
                  partido.jugado = true;
                }
              }
            });
            
            // Guardar las correcciones
            this.guardarTorneo();
          }
          
          // Si no hay partidos, regenerar MANTENIENDO resultados existentes
          if (this.partidos.length === 0) {
            console.log('No hay partidos, regenerando desde configuración...');
            this.generarPartidosDeGrupos();
          }
          
          // Actualizar todas las clasificaciones y vistas
          this.calcularTodasLasClasificaciones();
          this.actualizarVistaConResultadosEliminatorias();
          this.actualizarVistaGrupos();
        } catch (error) {
          console.error('Error cargando torneo:', error);
          this.inicializarTorneoDesdeGrupos();
        }
      } else {
        this.inicializarTorneoDesdeGrupos();
      }
    }

    private async cargarTorneoDesdeBaseDatos(torneoId: string): Promise<void> {
      try {
        const response = await fetch(`/api/torneos?action=obtener&id=${torneoId}`);
        if (response.ok) {
          const torneoDb = await response.json();
          
          if (torneoDb) {
            console.log('✅ Torneo específico cargado desde base de datos:', torneoDb);
            this.torneoActivo = torneoDb;
            this.partidos = torneoDb.partidos || [];
            this.resultadosEliminatorias = torneoDb.resultadosEliminatorias || {};
            
            // Actualizar vista
            this.calcularTodasLasClasificaciones();
            this.actualizarVistaConResultadosEliminatorias();
            this.actualizarVistaGrupos();
          }
        } else {
          console.error('Error cargando torneo desde base de datos:', response.statusText);
        }
      } catch (error) {
        console.error('Error en cargarTorneoDesdeBaseDatos:', error);
      }
    }

    private inicializarTorneoDesdeGrupos(): void {
      // Cargar configuración de grupos
      const configGrupos = localStorage.getItem('gruposConfig');
      if (configGrupos) {
        try {
          const config = JSON.parse(configGrupos);
          this.crearTorneoDesdeConfiguracion(config);
        } catch (error) {
          console.error('Error inicializando torneo desde grupos:', error);
          this.mostrarMensajeError('No se encontró configuración de grupos válida');
        }
      } else {
        this.mostrarMensajeError('Primero debes configurar los grupos');
      }
    }

    private crearTorneoDesdeConfiguracion(config: any): void {
      console.log('Creando torneo desde configuración:', config);
      console.log('Grupos en configuración:', config.grupos?.map((g: any) => ({
        nombre: g.nombre,
        jugadores: g.jugadores?.length || 0,
        primeros: g.jugadores?.slice(0, 3).map((j: any) => j.nombre || j.id)
      })));
      
      this.torneoActivo = {
        id: Date.now(),
        nombre: `Torneo FIFA ${new Date().getFullYear()}`,
        fechaInicio: new Date().toISOString(),
        configuracion: config.configuracion || {},
        grupos: config.grupos || [],
        fase: 'grupos',
        timestamp: config.timestamp || Date.now(), // Usar timestamp de la configuración
        estadisticas: {
          partidosJugados: 0,
          golesTotal: 0,
          goleadores: []
        }
      };

      console.log('Torneo activo creado:', this.torneoActivo);
      this.generarPartidosDeGrupos();
      this.guardarTorneo();
    }

    private generarPartidosDeGrupos(): void {
      this.partidos = [];
      
      if (!this.torneoActivo.grupos) {
        console.error('No hay grupos configurados en el torneo');
        return;
      }

      let partidoId = 1;
      
      // Verificar que no haya jugadores duplicados entre grupos
      const todosLosJugadores = new Set<string>();
      let hayDuplicados = false;
      
      for (const grupo of this.torneoActivo.grupos) {
        if (grupo.jugadores) {
          for (const jugador of grupo.jugadores) {
            const nombreJugador = jugador.nombre || jugador.id;
            if (todosLosJugadores.has(nombreJugador)) {
              console.error(`Jugador duplicado encontrado: ${nombreJugador}`);
              hayDuplicados = true;
            }
            todosLosJugadores.add(nombreJugador);
          }
        }
      }
      
      if (hayDuplicados) {
        console.warn('Se encontraron jugadores duplicados, regenerando asignación de grupos...');
        this.regenerarAsignacionGrupos();
      }
      
      for (const grupo of this.torneoActivo.grupos) {
        const jugadoresGrupo = grupo.jugadores || this.asignarJugadoresAGrupo(grupo);
        const partidosGrupo = this.generarFixtureGrupo(grupo, jugadoresGrupo);
        
        partidosGrupo.forEach(partido => {
          this.partidos.push({
            ...partido,
            id: partidoId++,
            jugado: false
          });
        });
      }

      console.log('Partidos de grupos generados:', this.partidos.length);
    }

    private regenerarAsignacionGrupos(): void {
      if (!this.torneoActivo.grupos) return;
      
      // Mezclar jugadores disponibles
      const jugadoresDisponibles = [...this.jugadores].sort(() => Math.random() - 0.5);
      let jugadorIndex = 0;
      
      // Redistribuir jugadores únicos
      for (const grupo of this.torneoActivo.grupos) {
        grupo.jugadores = [];
        for (let i = 0; i < grupo.tamaño && jugadorIndex < jugadoresDisponibles.length; i++) {
          grupo.jugadores.push(jugadoresDisponibles[jugadorIndex++]);
        }
      }
      
      // Guardar la nueva configuración
      const configGrupos = localStorage.getItem('gruposConfig');
      if (configGrupos) {
        try {
          const config = JSON.parse(configGrupos);
          config.grupos = this.torneoActivo.grupos;
          localStorage.setItem('gruposConfig', JSON.stringify(config));
          console.log('Configuración de grupos regenerada y guardada');
        } catch (error) {
          console.error('Error guardando configuración regenerada:', error);
        }
      }
    }

    private asignarJugadoresAGrupo(grupo: any): Jugador[] {
      // Primero intentar cargar desde la configuración guardada
      const torneoConfig = localStorage.getItem('gruposConfig');
      if (torneoConfig) {
        try {
          const config = JSON.parse(torneoConfig);
          const grupoConfig = config.grupos?.find((g: any) => g.nombre === grupo.nombre);
          
          if (grupoConfig && grupoConfig.jugadores && grupoConfig.jugadores.length > 0) {
            console.log(`Cargando jugadores para ${grupo.nombre}:`, grupoConfig.jugadores);
            
            // Convertir los jugadores guardados al formato correcto
            const jugadoresConvertidos = grupoConfig.jugadores.map((jugadorGuardado: any) => {
              const jugadorCompleto = this.jugadores.find(j => 
                j.id === jugadorGuardado.id || 
                j.nombre === jugadorGuardado.nombre
              );
              
              return jugadorCompleto || {
                id: jugadorGuardado.id || Date.now(),
                nombre: jugadorGuardado.nombre,
                equipo: jugadorGuardado.equipo
              };
            });
            
            return jugadoresConvertidos;
          }
        } catch (error) {
          console.error('Error cargando jugadores del grupo:', error);
        }
      }
      
      // Si no hay configuración válida, devolver array vacío
      // NO usar fallback aleatorio que pueda causar duplicados
      console.warn(`No se encontró configuración válida para ${grupo.nombre}`);
      return [];
    }

    private generarFixtureGrupo(grupo: any, jugadores: Jugador[]): Partido[] {
      const partidos: Partido[] = [];
      let jornada = 1;

      // Sistema round-robin
      for (let i = 0; i < jugadores.length; i++) {
        for (let j = i + 1; j < jugadores.length; j++) {
          const jugadorLocal = jugadores[i];
          const jugadorVisitante = jugadores[j];
          
          const equipoLocal = typeof jugadorLocal.equipo === 'string' ? jugadorLocal.equipo : jugadorLocal.equipo.id;
          const equipoVisitante = typeof jugadorVisitante.equipo === 'string' ? jugadorVisitante.equipo : jugadorVisitante.equipo.id;

          partidos.push({
            grupo: grupo.nombre,
            jornada: jornada++,
            jugadorLocal: jugadorLocal.nombre,
            jugadorVisitante: jugadorVisitante.nombre,
            equipoLocal,
            equipoVisitante
          });

          // Si es ida y vuelta
          if (this.torneoActivo.configuracion.tipoFixture === 'ida-vuelta') {
            partidos.push({
              grupo: grupo.nombre,
              jornada: jornada++,
              jugadorLocal: jugadorVisitante.nombre,
              jugadorVisitante: jugadorLocal.nombre,
              equipoLocal: equipoVisitante,
              equipoVisitante: equipoLocal
            });
          }
        }
      }

      return partidos;
    }

    private configurarEventos(): void {
      // Botones principales
      document.getElementById('btn-simular-jornada')?.addEventListener('click', () => this.simularJornada());
      document.getElementById('btn-generar-fixture')?.addEventListener('click', () => this.mostrarFixtureCompleto());
      document.getElementById('btn-avanzar-fase')?.addEventListener('click', () => this.avanzarAEliminatorias());
      document.getElementById('btn-simular-eliminatoria')?.addEventListener('click', () => this.simularEliminatoria());
      document.getElementById('btn-recargar-config')?.addEventListener('click', () => this.recargarConfiguracion());

      // Función de emergencia para recuperar datos
      (window as any).recuperarDatos = () => {
        console.log('=== FUNCIÓN DE RECUPERACIÓN ===');
        const todasLasClaves = [];
        for (let i = 0; i < localStorage.length; i++) {
          const key = localStorage.key(i);
          if (key) todasLasClaves.push(key);
        }
        
        console.log('Todas las claves encontradas:', todasLasClaves);
        
        // Buscar cualquier clave que contenga datos de torneo
        const clavesTorneo = todasLasClaves.filter(k => 
          k.includes('torneo') || k.includes('Torneo') || k.includes('partido') || k.includes('grupo')
        );
        
        console.log('Claves relacionadas con torneo:', clavesTorneo);
        
        clavesTorneo.forEach(clave => {
          const datos = localStorage.getItem(clave);
          console.log(`${clave}:`, datos);
        });
      };

      // Función para migrar datos a la base de datos
      (window as any).migrarABaseDatos = async () => {
        try {
          console.log('=== MIGRANDO DATOS A BASE DE DATOS ===');
          
          const response = await fetch('/api/torneos?action=migrar', {
            method: 'GET'
          });
          
          const result = await response.json();
          
          if (result.success) {
            console.log('✅ Datos migrados exitosamente a la base de datos');
            console.log('ID del torneo creado:', result.torneoId);
            
            // Recargar el torneo desde la base de datos
            await this.cargarTorneoDesdeBaseDatos(result.torneoId);
          } else {
            console.error('❌ Error migrando datos:', result.error);
          }
        } catch (error) {
          console.error('❌ Error en migración:', error);
        }
      };

      // Modal de resultado
      document.getElementById('btn-cerrar-modal')?.addEventListener('click', () => this.cerrarModalResultado());
      document.getElementById('btn-cancelar-resultado')?.addEventListener('click', () => this.cerrarModalResultado());
      document.getElementById('form-resultado')?.addEventListener('submit', (e) => this.guardarResultado(e));

      // Modal de confirmación
      document.getElementById('btn-cancelar-modal')?.addEventListener('click', () => this.cerrarModalConfirmacion());
      document.getElementById('btn-confirmar-modal')?.addEventListener('click', () => this.ejecutarAccionConfirmacion());

      // Filtros
      document.getElementById('filtro-grupo')?.addEventListener('change', () => this.aplicarFiltros());
      document.getElementById('filtro-estado')?.addEventListener('change', () => this.aplicarFiltros());
      document.getElementById('filtro-jornada')?.addEventListener('change', () => this.aplicarFiltros());
    }

    private configurarPestanas(): void {
      const tabButtons = document.querySelectorAll('.tab-button');
      const tabContents = document.querySelectorAll('.tab-content');

      tabButtons.forEach(button => {
        button.addEventListener('click', () => {
          const targetTab = button.getAttribute('data-tab');
          
          // Remover clases active
          tabButtons.forEach(btn => btn.classList.remove('active'));
          tabContents.forEach(content => content.classList.add('hidden'));

          // Agregar clase active
          button.classList.add('active');
          document.getElementById(`tab-${targetTab}`)?.classList.remove('hidden');

          // Actualizar contenido específico
          this.actualizarContenidoPestana(targetTab);
        });
      });
    }

    private actualizarContenidoPestana(pestana: string | null): void {
      switch (pestana) {
        case 'fase-grupos':
          this.actualizarPartidosGrupos();
          break;
        case 'clasificacion':
          this.actualizarClasificaciones();
          break;
        case 'eliminatorias':
          this.actualizarEliminatorias();
          break;
        case 'estadisticas':
          this.actualizarEstadisticas();
          break;
      }
    }

    private actualizarEstadoGeneral(): void {
      if (!this.torneoActivo) return;

      const partidosJugados = this.partidos.filter(p => p.jugado).length;
      const totalPartidos = this.partidos.length;
      const proximoPartido = this.partidos.find(p => !p.jugado);

      document.getElementById('fase-actual')!.textContent = this.obtenerNombreFase();
      document.getElementById('partidos-jugados')!.textContent = partidosJugados.toString();
      document.getElementById('total-partidos')!.textContent = `de ${totalPartidos} total`;

      if (proximoPartido) {
        document.getElementById('proximo-partido')!.textContent = 
          `${proximoPartido.jugadorLocal} vs ${proximoPartido.jugadorVisitante}`;
        document.getElementById('grupo-proximo')!.textContent = proximoPartido.grupo;
      } else {
        document.getElementById('proximo-partido')!.textContent = 'Todos completados';
        document.getElementById('grupo-proximo')!.textContent = '';
      }

      // Calcular clasificados
      const clasificados = this.calcularClasificados();
      document.getElementById('total-clasificados')!.textContent = clasificados.length.toString();
    }

    private obtenerNombreFase(): string {
      if (!this.torneoActivo) return '-';
      
      switch (this.torneoActivo.fase) {
        case 'grupos': return 'Fase de Grupos';
        case 'eliminatorias': return 'Eliminatorias';
        case 'semifinal': return 'Semifinales';
        case 'final': return 'Final';
        case 'terminado': return 'Terminado';
        default: return this.torneoActivo.fase || 'Desconocida';
      }
    }

    private actualizarPartidosGrupos(): void {
      const container = document.getElementById('partidos-grupos');
      if (!container) return;

      this.generarFiltros();
      const partidosFiltrados = this.aplicarFiltrosPartidos();

      if (partidosFiltrados.length === 0) {
        container.innerHTML = `
          <div class="text-center text-gray-400 py-8">
            <div class="text-4xl mb-4">⚽</div>
            <p>No hay partidos que mostrar</p>
          </div>
        `;
        return;
      }

      container.innerHTML = partidosFiltrados.map(partido => this.renderPartido(partido)).join('');
    }

    private renderPartido(partido: Partido): string {
      const equipoLocalImg = `/img/equipos/${partido.equipoLocal}.png`;
      const equipoVisitanteImg = `/img/equipos/${partido.equipoVisitante}.png`;
      
      const esJugado = partido.jugado;
      const resultado = esJugado ? `${partido.golesLocal} - ${partido.golesVisitante}` : 'vs';
      
      return `
        <div class="bg-gray-800/50 rounded-lg p-4 border border-gray-700 hover:border-gray-600 transition-colors">
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-4 flex-1">
              <!-- Jornada y Grupo -->
              <div class="text-center">
                <div class="text-xs text-gray-400">${partido.grupo}</div>
                <div class="text-xs text-gray-500">J${partido.jornada}</div>
              </div>

              <!-- Jugador Local -->
              <div class="flex items-center space-x-3 flex-1">
                <img src="${equipoLocalImg}" alt="${partido.equipoLocal}" 
                     class="w-8 h-8 object-contain" 
                     onerror="this.src='/img/equipos/default.png'">
                <div class="min-w-0 flex-1">
                  <p class="text-white font-medium truncate">${partido.jugadorLocal}</p>
                  <p class="text-gray-400 text-sm truncate">${partido.equipoLocal}</p>
                </div>
              </div>

              <!-- Resultado -->
              <div class="text-center px-4">
                <div class="text-xl font-bold text-white ${esJugado ? '' : 'text-gray-400'}">
                  ${resultado}
                </div>
                ${esJugado ? '<div class="text-xs text-green-400">Finalizado</div>' : '<div class="text-xs text-yellow-400">Pendiente</div>'}
              </div>

              <!-- Jugador Visitante -->
              <div class="flex items-center space-x-3 flex-1 justify-end">
                <div class="min-w-0 flex-1 text-right">
                  <p class="text-white font-medium truncate">${partido.jugadorVisitante}</p>
                  <p class="text-gray-400 text-sm truncate">${partido.equipoVisitante}</p>
                </div>
                <img src="${equipoVisitanteImg}" alt="${partido.equipoVisitante}" 
                     class="w-8 h-8 object-contain" 
                     onerror="this.src='/img/equipos/default.png'">
              </div>
            </div>

            <!-- Acciones -->
            <div class="ml-4">
              ${!esJugado ? `
                <button onclick="torneoManager.abrirModalResultado(${partido.id})" 
                        class="btn btn-primary btn-sm">
                  ⚽ Registrar
                </button>
              ` : `
                <button onclick="torneoManager.editarResultado(${partido.id})" 
                        class="btn btn-secondary btn-sm">
                  ✏️ Editar
                </button>
              `}
            </div>
          </div>
        </div>
      `;
    }

    public abrirModalResultado(partidoId: number): void {
      const partido = this.partidos.find(p => p.id === partidoId);
      if (!partido) return;

      this.partidoSeleccionado = partido;
      
      // Determinar si es ida y vuelta
      const esIdaVuelta = this.torneoActivo.configuracion?.formatoEliminatorias === 'ida-vuelta';
      
      // Configurar información del partido
      document.getElementById('info-partido')!.textContent = `${partido.grupo} - Jornada ${partido.jornada}`;
      document.getElementById('tipo-partido-info')!.textContent = esIdaVuelta ? 'Formato: Ida y Vuelta' : 'Formato: Partido Único';
      
      if (esIdaVuelta) {
        this.configurarModalIdaVuelta(partido);
      } else {
        this.configurarModalSimple(partido);
      }

      const modal = document.getElementById('modal-resultado');
      modal?.classList.remove('hidden');
      
      // Añadir animación de entrada
      const modalContent = modal?.querySelector('.bg-gray-800');
      modalContent?.classList.add('modal-entrada');
      
      // Configurar eventos
      this.configurarEventosModal();
    }

    private configurarModalSimple(partido: Partido): void {
      // Ocultar selector de partido
      document.getElementById('selector-partido')?.classList.add('hidden');
      document.getElementById('resumen-global')?.classList.add('hidden');
      document.getElementById('partido-completado')?.classList.add('hidden');
      
      // Configurar como partido único
      this.configurarPartidoActual(partido, 'PARTIDO ÚNICO', `${partido.jugadorLocal} vs ${partido.jugadorVisitante}`);
      
      // Llenar datos
      this.llenarDatosPartido(partido);
    }

    private configurarModalIdaVuelta(partido: Partido): void {
      // Mostrar selector de partido
      document.getElementById('selector-partido')?.classList.remove('hidden');
      document.getElementById('resumen-global')?.classList.remove('hidden');
      
      // Datos del cruce (partidos ida y vuelta)
      this.partidoIdaActual = partido;
      this.partidoVueltaActual = this.buscarPartidoVuelta(partido);
      
      // Configurar botones de selección
      this.configurarSelectoresIdaVuelta();
      
      // Seleccionar automáticamente el partido apropiado
      if (!this.partidoIdaActual.jugado) {
        this.seleccionarPartido('ida');
      } else if (this.partidoVueltaActual && !this.partidoVueltaActual.jugado) {
        this.seleccionarPartido('vuelta');
      } else {
        this.seleccionarPartido('ida'); // Por defecto
      }
    }

    private buscarPartidoVuelta(partidoIda: Partido): Partido | null {
      // Buscar el partido de vuelta (intercambiando local y visitante)
      return this.partidos.find(p => 
        p.id !== partidoIda.id &&
        p.jugadorLocal === partidoIda.jugadorVisitante &&
        p.jugadorVisitante === partidoIda.jugadorLocal &&
        p.grupo === partidoIda.grupo
      ) || null;
    }

    private configurarSelectoresIdaVuelta(): void {
      const btnIda = document.getElementById('btn-partido-ida');
      const btnVuelta = document.getElementById('btn-partido-vuelta');
      const estadoIda = document.getElementById('estado-ida');
      const estadoVuelta = document.getElementById('estado-vuelta');
      
      if (btnIda && estadoIda) {
        estadoIda.textContent = this.partidoIdaActual?.jugado ? 
          `Finalizado (${this.partidoIdaActual.golesLocal}-${this.partidoIdaActual.golesVisitante})` : 
          'Pendiente';
        
        btnIda.onclick = () => this.seleccionarPartido('ida');
      }
      
      if (btnVuelta && estadoVuelta && this.partidoVueltaActual) {
        estadoVuelta.textContent = this.partidoVueltaActual.jugado ? 
          `Finalizado (${this.partidoVueltaActual.golesLocal}-${this.partidoVueltaActual.golesVisitante})` : 
          'Pendiente';
        
        btnVuelta.onclick = () => this.seleccionarPartido('vuelta');
      }
    }

    private seleccionarPartido(tipo: 'ida' | 'vuelta'): void {
      const partido = tipo === 'ida' ? this.partidoIdaActual : this.partidoVueltaActual;
      if (!partido) return;

      this.partidoSeleccionado = partido;
      
      // Actualizar selección visual
      const btnIda = document.getElementById('btn-partido-ida');
      const btnVuelta = document.getElementById('btn-partido-vuelta');
      
      btnIda?.classList.toggle('border-blue-500', tipo === 'ida');
      btnIda?.classList.toggle('bg-blue-600/40', tipo === 'ida');
      btnIda?.classList.toggle('border-blue-500/50', tipo !== 'ida');
      btnIda?.classList.toggle('bg-blue-600/20', tipo !== 'ida');
      
      btnVuelta?.classList.toggle('border-green-500', tipo === 'vuelta');
      btnVuelta?.classList.toggle('bg-green-600/40', tipo === 'vuelta');
      btnVuelta?.classList.toggle('border-green-500/50', tipo !== 'vuelta');
      btnVuelta?.classList.toggle('bg-green-600/20', tipo !== 'vuelta');
      
      // Configurar información del partido actual
      const tipoTexto = tipo === 'ida' ? '🏠 PARTIDO DE IDA' : '✈️ PARTIDO DE VUELTA';
      const descripcion = tipo === 'ida' ? 
        `${partido.jugadorLocal} (local) vs ${partido.jugadorVisitante} (visitante)` :
        `${partido.jugadorLocal} (local) vs ${partido.jugadorVisitante} (visitante)`;
      
      this.configurarPartidoActual(partido, tipoTexto, descripcion);
      
      // Llenar datos del partido
      this.llenarDatosPartido(partido);
      
      // Mostrar estado si ya está jugado
      if (partido.jugado) {
        this.mostrarPartidoCompletado(partido);
      } else {
        document.getElementById('partido-completado')?.classList.add('hidden');
      }
      
      // Actualizar resumen global
      this.actualizarResumenGlobal();
    }

    private configurarPartidoActual(partido: Partido, tipo: string, descripcion: string): void {
      document.getElementById('partido-actual-tipo')!.textContent = tipo;
      document.getElementById('partido-actual-descripcion')!.textContent = descripcion;
    }

    private llenarDatosPartido(partido: Partido): void {
      // Nombres y equipos
      document.getElementById('nombre-local')!.textContent = partido.jugadorLocal;
      document.getElementById('equipo-local')!.textContent = partido.equipoLocal;
      document.getElementById('nombre-visitante')!.textContent = partido.jugadorVisitante;
      document.getElementById('equipo-visitante')!.textContent = partido.equipoVisitante;
      
      // Imágenes
      const imgLocal = document.getElementById('img-local') as HTMLImageElement;
      const imgVisitante = document.getElementById('img-visitante') as HTMLImageElement;
      imgLocal.src = `/img/equipos/${partido.equipoLocal}.png`;
      imgVisitante.src = `/img/equipos/${partido.equipoVisitante}.png`;
      
      // Goles
      const golesLocalInput = document.getElementById('goles-local') as HTMLInputElement;
      const golesVisitanteInput = document.getElementById('goles-visitante') as HTMLInputElement;
      
      golesLocalInput.value = partido.golesLocal?.toString() || '0';
      golesVisitanteInput.value = partido.golesVisitante?.toString() || '0';
      
      // Actualizar marcador
      this.actualizarMarcadorPreview();
    }

    private mostrarPartidoCompletado(partido: Partido): void {
      const container = document.getElementById('partido-completado');
      const resultado = document.getElementById('resultado-registrado');
      
      if (container && resultado) {
        resultado.textContent = `${partido.jugadorLocal} ${partido.golesLocal} - ${partido.golesVisitante} ${partido.jugadorVisitante}`;
        container.classList.remove('hidden');
      }
    }

    private actualizarResumenGlobal(): void {
      if (!this.partidoIdaActual || !this.partidoVueltaActual) return;
      
      const golesLocalTotal = (this.partidoIdaActual.golesLocal || 0) + (this.partidoVueltaActual.golesVisitante || 0);
      const golesVisitanteTotal = (this.partidoIdaActual.golesVisitante || 0) + (this.partidoVueltaActual.golesLocal || 0);
      
      document.getElementById('goles-totales-local')!.textContent = golesLocalTotal.toString();
      document.getElementById('goles-totales-visitante')!.textContent = golesVisitanteTotal.toString();
      document.getElementById('nombre-total-local')!.textContent = this.partidoIdaActual.jugadorLocal;
      document.getElementById('nombre-total-visitante')!.textContent = this.partidoIdaActual.jugadorVisitante;
      document.getElementById('resultado-global')!.textContent = `${golesLocalTotal} - ${golesVisitanteTotal}`;
      
      // Estado del ganador
      const estadoGanador = document.getElementById('estado-ganador');
      if (estadoGanador) {
        if (golesLocalTotal > golesVisitanteTotal) {
          estadoGanador.textContent = `Ganador: ${this.partidoIdaActual.jugadorLocal}`;
          estadoGanador.className = 'text-sm text-green-400';
        } else if (golesVisitanteTotal > golesLocalTotal) {
          estadoGanador.textContent = `Ganador: ${this.partidoIdaActual.jugadorVisitante}`;
          estadoGanador.className = 'text-sm text-green-400';
        } else {
          estadoGanador.textContent = 'Empate';
          estadoGanador.className = 'text-sm text-yellow-400';
        }
      }
    }

    private configurarEventosModal(): void {
      // Solo configurar una vez
      if ((this as any).eventosModalConfigurados) return;
      
      // Event listeners para inputs de goles
      const golesLocalInput = document.getElementById('goles-local') as HTMLInputElement;
      const golesVisitanteInput = document.getElementById('goles-visitante') as HTMLInputElement;
      
      const actualizarMarcador = () => {
        this.actualizarMarcadorPreview();
        this.actualizarResumenGlobal();
      };
      
      golesLocalInput.addEventListener('input', actualizarMarcador);
      golesVisitanteInput.addEventListener('input', actualizarMarcador);
      
      // Botón guardar
      document.getElementById('btn-guardar-resultado')?.addEventListener('click', (e) => {
        this.guardarResultado(e);
      });
      
      // Botón editar
      document.getElementById('btn-editar-partido')?.addEventListener('click', () => {
        document.getElementById('partido-completado')?.classList.add('hidden');
      });
      
      (this as any).eventosModalConfigurados = true;
    }

    private actualizarMarcadorPreview(): void {
      const golesLocal = (document.getElementById('goles-local') as HTMLInputElement).value || '0';
      const golesVisitante = (document.getElementById('goles-visitante') as HTMLInputElement).value || '0';
      const marcador = document.getElementById('marcador-preview');
      if (marcador) {
        marcador.textContent = `${golesLocal} - ${golesVisitante}`;
        
        // Añadir efecto de pulso cuando cambia
        marcador.classList.add('marcador-pulso');
        setTimeout(() => {
          marcador.classList.remove('marcador-pulso');
        }, 1000);
      }
    }

    public editarResultado(partidoId: number): void {
      this.abrirModalResultado(partidoId);
    }

    private cerrarModalResultado(): void {
      const modal = document.getElementById('modal-resultado');
      modal?.classList.add('hidden');
      
      // Limpiar propiedades
      this.partidoSeleccionado = null;
      this.partidoIdaActual = null;
      this.partidoVueltaActual = null;
      
      // Limpiar estado visual si es ida y vuelta
      document.getElementById('partido-completado')?.classList.add('hidden');
    }

    private guardarResultado(e: Event): void {
      e.preventDefault();
      
      if (!this.partidoSeleccionado) return;

      const golesLocal = parseInt((document.getElementById('goles-local') as HTMLInputElement).value);
      const golesVisitante = parseInt((document.getElementById('goles-visitante') as HTMLInputElement).value);

      if (isNaN(golesLocal) || isNaN(golesVisitante) || golesLocal < 0 || golesVisitante < 0) {
        this.mostrarNotificacion('Por favor ingresa goles válidos', 'error');
        return;
      }

      // Actualizar partido
      this.partidoSeleccionado.golesLocal = golesLocal;
      this.partidoSeleccionado.golesVisitante = golesVisitante;
      this.partidoSeleccionado.jugado = true;
      this.partidoSeleccionado.fecha = new Date().toISOString();

      // Actualizar estadísticas
      this.actualizarEstadisticasPartido(this.partidoSeleccionado);
      
      this.guardarTorneo();
      
      // Si es ida y vuelta, mostrar estado actualizado
      const esIdaVuelta = this.torneoActivo.configuracion?.formatoEliminatorias === 'ida-vuelta';
      if (esIdaVuelta) {
        this.mostrarPartidoCompletado(this.partidoSeleccionado);
        this.configurarSelectoresIdaVuelta();
        this.actualizarResumenGlobal();
        
        // Verificar si ambos partidos están completos
        if (this.partidoIdaActual?.jugado && this.partidoVueltaActual?.jugado) {
          this.mostrarNotificacion('¡Cruce completado! Ambos partidos registrados', 'success');
        } else {
          this.mostrarNotificacion('Partido registrado. Registra el partido de vuelta', 'success');
        }
      } else {
        this.cerrarModalResultado();
        this.mostrarNotificacion('Resultado guardado correctamente', 'success');
      }
      
      this.actualizarTodaLaVista();
    }

    private actualizarEstadisticasPartido(partido: Partido): void {
      // Actualizar estadísticas del torneo
      if (this.torneoActivo.estadisticas) {
        this.torneoActivo.estadisticas.partidosJugados++;
        this.torneoActivo.estadisticas.golesTotal += (partido.golesLocal || 0) + (partido.golesVisitante || 0);
      }
    }

    private generarFiltros(): void {
      // Filtro de grupos
      const selectGrupo = document.getElementById('filtro-grupo') as HTMLSelectElement;
      const grupos = [...new Set(this.partidos.map(p => p.grupo))];
      selectGrupo.innerHTML = '<option value="">Todos los grupos</option>' +
        grupos.map(grupo => `<option value="${grupo}">${grupo}</option>`).join('');

      // Filtro de jornadas
      const selectJornada = document.getElementById('filtro-jornada') as HTMLSelectElement;
      const jornadas = [...new Set(this.partidos.map(p => p.jornada))].sort((a, b) => a - b);
      selectJornada.innerHTML = '<option value="">Todas las jornadas</option>' +
        jornadas.map(jornada => `<option value="${jornada}">Jornada ${jornada}</option>`).join('');
    }

    private aplicarFiltros(): void {
      this.actualizarPartidosGrupos();
    }

    private aplicarFiltrosPartidos(): Partido[] {
      const grupoSeleccionado = (document.getElementById('filtro-grupo') as HTMLSelectElement).value;
      const estadoSeleccionado = (document.getElementById('filtro-estado') as HTMLSelectElement).value;
      const jornadaSeleccionada = (document.getElementById('filtro-jornada') as HTMLSelectElement).value;

      return this.partidos.filter(partido => {
        const cumpleGrupo = !grupoSeleccionado || partido.grupo === grupoSeleccionado;
        const cumpleEstado = !estadoSeleccionado || 
          (estadoSeleccionado === 'jugado' && partido.jugado) ||
          (estadoSeleccionado === 'pendiente' && !partido.jugado);
        const cumpleJornada = !jornadaSeleccionada || partido.jornada.toString() === jornadaSeleccionada;

        return cumpleGrupo && cumpleEstado && cumpleJornada;
      });
    }

    private actualizarClasificaciones(): void {
      this.calcularTodasLasClasificaciones();
      
      const container = document.getElementById('tablas-clasificacion');
      if (!container) return;

      const grupos = Object.keys(this.clasificaciones);
      
      container.innerHTML = grupos.map(grupo => this.renderTablaClasificacion(grupo)).join('');
    }

    private calcularTodasLasClasificaciones(): void {
      const grupos = [...new Set(this.partidos.map(p => p.grupo))];
      console.log('Calculando clasificaciones para grupos:', grupos);
      console.log('Total de partidos disponibles:', this.partidos.length);
      
      grupos.forEach((grupo: string) => {
        const partidosGrupo = this.partidos.filter(p => p.grupo === grupo);
        const partidosJugados = partidosGrupo.filter(p => p.jugado);
        console.log(`Grupo ${grupo}: ${partidosGrupo.length} partidos totales, ${partidosJugados.length} jugados`);
        
        this.clasificaciones[grupo] = this.calcularClasificacionGrupo(grupo);
      });
    }

    private calcularClasificacionGrupo(grupo: string): ClasificacionJugador[] {
      const partidosGrupo = this.partidos.filter(p => p.grupo === grupo && p.jugado);
      
      if (partidosGrupo.length === 0) {
        // Si no hay partidos jugados, mostrar jugadores con stats en 0
        const todosLosPartidos = this.partidos.filter(p => p.grupo === grupo);
        const jugadoresSet = new Set<string>();
        
        todosLosPartidos.forEach(p => {
          jugadoresSet.add(p.jugadorLocal);
          jugadoresSet.add(p.jugadorVisitante);
        });

        return Array.from(jugadoresSet).map(nombreJugador => {
          const partidoEjemplo = todosLosPartidos.find(p => 
            p.jugadorLocal === nombreJugador || p.jugadorVisitante === nombreJugador
          );
          
          const equipo = partidoEjemplo ? 
            (partidoEjemplo.jugadorLocal === nombreJugador ? partidoEjemplo.equipoLocal : partidoEjemplo.equipoVisitante) 
            : '';

          return {
            nombre: nombreJugador,
            equipo,
            puntos: 0,
            partidos: 0,
            ganados: 0,
            empatados: 0,
            perdidos: 0,
            golesFavor: 0,
            golesContra: 0,
            diferencia: 0
          };
        });
      }
      
      const jugadoresSet = new Set<string>();
      
      // Obtener todos los jugadores del grupo
      partidosGrupo.forEach(p => {
        jugadoresSet.add(p.jugadorLocal);
        jugadoresSet.add(p.jugadorVisitante);
      });

      const clasificacion: ClasificacionJugador[] = Array.from(jugadoresSet).map(nombreJugador => {
        const partidosJugador = partidosGrupo.filter(p => 
          p.jugadorLocal === nombreJugador || p.jugadorVisitante === nombreJugador
        );

        let puntos = 0, ganados = 0, empatados = 0, perdidos = 0;
        let golesFavor = 0, golesContra = 0;
        let equipo = '';

        partidosJugador.forEach(p => {
          const esLocal = p.jugadorLocal === nombreJugador;
          const golesPropio = esLocal ? p.golesLocal! : p.golesVisitante!;
          const golesRival = esLocal ? p.golesVisitante! : p.golesLocal!;
          
          golesFavor += golesPropio;
          golesContra += golesRival;
          
          if (!equipo) {
            equipo = esLocal ? p.equipoLocal : p.equipoVisitante;
          }

          if (golesPropio > golesRival) {
            puntos += 3;
            ganados++;
          } else if (golesPropio === golesRival) {
            puntos += 1;
            empatados++;
          } else {
            perdidos++;
          }
        });

        return {
          nombre: nombreJugador,
          equipo,
          puntos,
          partidos: partidosJugador.length,
          ganados,
          empatados,
          perdidos,
          golesFavor,
          golesContra,
          diferencia: golesFavor - golesContra
        };
      });

      // Ordenar por puntos, diferencia de goles, goles a favor
      return clasificacion.sort((a, b) => {
        if (a.puntos !== b.puntos) return b.puntos - a.puntos;
        if (a.diferencia !== b.diferencia) return b.diferencia - a.diferencia;
        return b.golesFavor - a.golesFavor;
      });
    }

    private renderTablaClasificacion(grupo: string): string {
      const clasificacion = this.clasificaciones[grupo] || [];
      const grupoConfig = this.torneoActivo.grupos?.find((g: any) => g.nombre === grupo);
      const numClasificados = grupoConfig?.clasificados || 2;
      
      if (clasificacion.length === 0) {
        return `
          <div class="bg-gray-800/50 rounded-lg overflow-hidden">
            <div class="bg-gradient-to-r from-blue-600 to-blue-700 p-4">
              <h4 class="text-lg font-bold text-white">${grupo}</h4>
            </div>
            <div class="p-6 text-center text-gray-400">
              <div class="text-3xl mb-2">⚽</div>
              <p>No hay datos de clasificación</p>
              <p class="text-sm">Los datos aparecerán cuando se jueguen partidos</p>
            </div>
          </div>
        `;
      }
      
      return `
        <div class="bg-gray-800/50 rounded-lg overflow-hidden">
          <div class="bg-gradient-to-r from-blue-600 to-blue-700 p-4">
            <h4 class="text-lg font-bold text-white">${grupo}</h4>
          </div>
          
          <div class="overflow-x-auto">
            <table class="w-full text-sm">
              <thead class="bg-gray-700/50">
                <tr class="text-gray-300">
                  <th class="text-left p-3">Pos</th>
                  <th class="text-left p-3">Jugador</th>
                  <th class="text-center p-3">PJ</th>
                  <th class="text-center p-3">Pts</th>
                  <th class="text-center p-3">GF</th>
                  <th class="text-center p-3">GC</th>
                  <th class="text-center p-3">DG</th>
                </tr>
              </thead>
              <tbody>
                ${clasificacion.map((jugador, index) => `
                  <tr class="border-b border-gray-700/50 hover:bg-gray-700/30 ${index < numClasificados ? 'bg-green-900/20' : ''}">
                    <td class="p-3">
                      <span class="w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold text-white ${
                        index < numClasificados ? 'bg-green-600' : 'bg-gray-600'
                      }">
                        ${index + 1}
                      </span>
                    </td>
                    <td class="p-3">
                      <div class="flex items-center space-x-2">
                        <img src="/img/equipos/${jugador.equipo}.png" alt="${jugador.equipo}" 
                             class="w-6 h-6 object-contain" onerror="this.src='/img/equipos/default.png'">
                        <div>
                          <p class="text-white font-medium">${jugador.nombre}</p>
                          <p class="text-gray-400 text-xs">${jugador.equipo}</p>
                        </div>
                      </div>
                    </td>
                    <td class="text-center p-3 text-gray-300">${jugador.partidos}</td>
                    <td class="text-center p-3 text-white font-bold">${jugador.puntos}</td>
                    <td class="text-center p-3 text-green-400">${jugador.golesFavor}</td>
                    <td class="text-center p-3 text-red-400">${jugador.golesContra}</td>
                    <td class="text-center p-3 text-white font-bold ${jugador.diferencia >= 0 ? 'text-green-400' : 'text-red-400'}">
                      ${jugador.diferencia >= 0 ? '+' : ''}${jugador.diferencia}
                    </td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </div>
          
          ${clasificacion.length > 0 && numClasificados > 0 ? `
            <div class="p-3 bg-green-900/20 border-t border-green-700/50">
              <p class="text-green-400 text-xs text-center">
                ✓ ${numClasificados === 1 ? 'El primer lugar clasifica' : `Los primeros ${numClasificados} lugares clasifican`} a eliminatorias
              </p>
            </div>
          ` : ''}
        </div>
      `;
    }

    private actualizarEliminatorias(): void {
      const container = document.getElementById('bracket-eliminatorias');
      if (!container) return;

      if (this.torneoActivo.fase === 'grupos') {
        const partidosRestantes = this.partidos.filter(p => !p.jugado).length;
        const clasificados = this.calcularClasificados();
        const esIdaVuelta = this.torneoActivo.configuracion?.formatoEliminatorias === 'ida-vuelta';
        
        // Determinar cuántos clasificados esperamos
        const totalClasificados = this.torneoActivo.grupos?.reduce((total: number, grupo: any) => {
          return total + (grupo.clasificados || 2);
        }, 0) || 0;

        // Verificar si podemos avanzar a eliminatorias
        const puedeAvanzar = partidosRestantes === 0 && clasificados.length === totalClasificados;
        
        // Actualizar botón de avanzar
        const btnAvanzar = document.getElementById('btn-avanzar-fase') as HTMLButtonElement;
        if (btnAvanzar) {
          btnAvanzar.disabled = !puedeAvanzar;
          btnAvanzar.textContent = puedeAvanzar ? '⏭️ Avanzar a Eliminatorias' : `⏳ Faltan ${partidosRestantes} partidos`;
        }

        container.innerHTML = this.generarDiagramaEliminatorias(clasificados, totalClasificados, esIdaVuelta, partidosRestantes);
      } else {
        // Mostrar bracket activo de eliminatorias
        this.mostrarBracketActivo();
      }
    }

    private generarDiagramaEliminatorias(clasificados: any[], totalEsperados: number, esIdaVuelta: boolean, partidosRestantes: number): string {
      // Usar la misma lógica que en grupos.astro para determinar la estructura
      const estructuraEliminatoria = this.determinarEstructuraEliminatoria(totalEsperados);
      
      return `
        <div class="bracket-preview">
          <div class="bracket-header">
            <h4 class="text-xl font-bold text-white mb-4">🏆 Estructura de Eliminatorias</h4>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <div class="bg-blue-900/30 rounded-lg p-4 text-center">
                <div class="text-2xl font-bold text-blue-400">${clasificados.length}</div>
                <div class="text-sm text-gray-400">Clasificados</div>
              </div>
              <div class="bg-green-900/30 rounded-lg p-4 text-center">
                <div class="text-2xl font-bold text-green-400">${totalEsperados}</div>
                <div class="text-sm text-gray-400">Total Esperados</div>
              </div>
              <div class="bg-orange-900/30 rounded-lg p-4 text-center">
                <div class="text-2xl font-bold text-orange-400">${partidosRestantes}</div>
                <div class="text-sm text-gray-400">Partidos Restantes</div>
              </div>
            </div>
          </div>

          ${partidosRestantes > 0 ? `
            <div class="bg-yellow-900/20 border border-yellow-700/50 rounded-lg p-4 mb-6">
              <div class="flex items-center space-x-2 text-yellow-400">
                <span class="text-xl">⏳</span>
                <span class="font-medium">Esperando finalización de la fase de grupos</span>
              </div>
              <p class="text-yellow-300 text-sm mt-2">
                Las eliminatorias comenzarán automáticamente cuando todos los partidos de grupos estén completos.
              </p>
            </div>
          ` : ''}

          <div class="bracket-structure">
            ${this.generarEstructuraPersonalizada(clasificados, totalEsperados, estructuraEliminatoria, esIdaVuelta)}
          </div>

          <div class="bracket-info mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
            <div class="bg-gray-800/50 rounded-lg p-4">
              <h5 class="font-semibold text-blue-400 mb-2">📋 Formato</h5>
              <p class="text-gray-300 text-sm">
                ${esIdaVuelta ? 'Eliminación directa (ida y vuelta)' : 'Eliminación directa (partido único)'}
              </p>
              ${esIdaVuelta ? '<p class="text-gray-400 text-xs mt-1">Cada cruce se juega en dos partidos</p>' : ''}
            </div>
            <div class="bg-gray-800/50 rounded-lg p-4">
              <h5 class="font-semibold text-green-400 mb-2">🏆 Clasificación</h5>
              <p class="text-gray-300 text-sm">
                ${this.torneoActivo.grupos?.map((g: any) => `${g.nombre}: ${g.clasificados || 2} clasificados`).join(' • ')}
              </p>
            </div>
          </div>

          <!-- Explicación de la estructura -->
          <div class="bg-blue-900/20 border border-blue-700/50 rounded-lg p-4 mt-4">
            <h5 class="font-semibold text-blue-400 mb-2">📖 Explicación de la Estructura</h5>
            <div class="text-gray-300 text-sm space-y-2">
              ${this.generarExplicacionEstructura(estructuraEliminatoria, totalEsperados)}
            </div>
          </div>
        </div>
      `;
    }

    private determinarEstructuraEliminatoria(totalClasificados: number): any {
      // Reutilizar la misma lógica que grupos.astro
      if (totalClasificados <= 2) {
        return { tipo: 'final', descripcion: 'Final directa' };
      } else if (totalClasificados <= 4) {
        return { tipo: 'semifinal', descripcion: 'Semifinales directas' };
      } else if (totalClasificados === 5) {
        return { 
          tipo: 'especial-5', 
          descripcion: 'Ronda previa + semifinales',
          estructura: {
            rondaPrevia: { participantes: 2, descripcion: '4° vs 5°' },
            semifinales: { participantes: 4, descripcion: '1°, 2°, 3° + ganador ronda previa' }
          }
        };
      } else if (totalClasificados === 6) {
        return { 
          tipo: 'especial-6', 
          descripcion: 'Primeros lugares directo, segundos lugares compiten',
          estructura: {
            directos: { participantes: 3, descripcion: '1° de cada grupo pasan directo a semifinales' },
            rondaPrevia: { participantes: 3, descripcion: '2° lugares: 2°B vs 2°C, ganador vs 2°A' },
            semifinales: { participantes: 4, descripcion: 'Los 3 primeros + ganador de segundos lugares' }
          }
        };
      } else if (totalClasificados === 7) {
        return { 
          tipo: 'especial-7', 
          descripcion: 'Primer lugar bye, resto compite',
          estructura: {
            byes: { participantes: 1, descripcion: '1° lugar pasa directo a semifinales' },
            rondaPrevia: { participantes: 6, descripcion: '6 participantes en 3 partidos' },
            semifinales: { participantes: 4, descripcion: '1° lugar + 3 ganadores de ronda previa' }
          }
        };
      } else {
        // Para 8 o más, bracket estándar
        const potenciaDeDos = Math.pow(2, Math.ceil(Math.log2(totalClasificados)));
        return { 
          tipo: 'bracket-estandar', 
          descripcion: `Bracket estándar de ${potenciaDeDos} participantes`,
          potencia: potenciaDeDos
        };
      }
    }

    private generarEstructuraPersonalizada(clasificados: any[], totalEsperados: number, estructura: any, esIdaVuelta: boolean): string {
      switch (estructura.tipo) {
        case 'final':
          return this.generarFinalDirecta(clasificados, esIdaVuelta);
        
        case 'semifinal':
          return this.generarSemifinalesDirectas(clasificados, esIdaVuelta);
        
        case 'especial-5':
          return this.generarEstructura5Clasificados(clasificados, esIdaVuelta);
        
        case 'especial-6':
          return this.generarEstructura6Clasificados(clasificados, esIdaVuelta);
        
        case 'especial-7':
          return this.generarEstructura7Clasificados(clasificados, esIdaVuelta);
        
        case 'bracket-estandar':
          return this.generarBracketEstandar(clasificados, estructura.potencia, esIdaVuelta);
        
        default:
          return this.generarBracketEstandar(clasificados, totalEsperados, esIdaVuelta);
      }
    }

    private generarEstructura6Clasificados(clasificados: any[], esIdaVuelta: boolean): string {
      // Organizar clasificados por grupo de manera más robusta
      const gruposMap = new Map<string, any[]>();
      
      // Agrupar clasificados por grupo
      clasificados.forEach(c => {
        if (!gruposMap.has(c.grupo)) {
          gruposMap.set(c.grupo, []);
        }
        gruposMap.get(c.grupo)!.push(c);
      });
      
      // Ordenar cada grupo por posición
      gruposMap.forEach((jugadores, grupo) => {
        jugadores.sort((a, b) => a.posicion - b.posicion);
      });
      
      // Obtener primeros y segundos lugares de manera ordenada
      const grupos = Array.from(gruposMap.keys()).sort(); // A, B, C
      const primeros = grupos.map(grupo => gruposMap.get(grupo)?.[0]).filter(Boolean);
      const segundos = grupos.map(grupo => gruposMap.get(grupo)?.[1]).filter(Boolean);
      
      return `
        <div class="estructura-especial-6 space-y-8">
          <!-- Ronda Previa de Segundos Lugares -->
          <div class="ronda-section">
            <h4 class="text-lg font-bold text-white mb-4 flex items-center">
              🔄 Ronda Previa - Segundos Lugares
              <span class="text-sm text-gray-400 ml-2">(Solo segundos lugares compiten)</span>
            </h4>
            <div class="space-y-4">
              <!-- Partido 1: 2°B vs 2°C -->
              <div class="match-preview bg-gray-800/50 border border-gray-600 rounded-lg p-4">
                <div class="flex justify-between items-center mb-3">
                  <span class="text-sm font-medium text-blue-400">Partido 1 - Ronda Previa</span>
                  <button class="btn btn-sm btn-success" onclick="torneoManager.registrarResultadoEliminatoria('ronda-previa-1')">
                    ⚽ Registrar
                  </button>
                </div>
                <div class="flex items-center justify-center gap-6">
                  <div class="participant ${segundos[1] ? 'filled' : 'empty'} flex-1 max-w-xs">
                    <div class="text-center p-3 bg-gray-700/50 rounded-lg border border-gray-600">
                      ${this.renderParticipante(segundos[1], '2° Grupo B')}
                    </div>
                  </div>
                  <div class="vs-indicator flex flex-col items-center justify-center px-4">
                    <div class="text-2xl text-blue-400 mb-1">⚔️</div>
                    <div class="text-sm text-blue-300 font-medium">VS</div>
                  </div>
                  <div class="participant ${segundos[2] ? 'filled' : 'empty'} flex-1 max-w-xs">
                    <div class="text-center p-3 bg-gray-700/50 rounded-lg border border-gray-600">
                      ${this.renderParticipante(segundos[2], '2° Grupo C')}
                    </div>
                  </div>
                </div>
                <div class="text-xs text-blue-300 mt-3 text-center font-medium">
                  💡 El ganador avanza al Partido 2 para enfrentar al 2° lugar del Grupo A
                </div>
              </div>

              <!-- Partido 2: Ganador P1 vs 2°A -->
              <div class="match-preview bg-gray-800/50 border border-gray-600 rounded-lg p-4">
                <div class="flex justify-between items-center mb-3">
                  <span class="text-sm font-medium text-blue-400">Partido 2 - Final de Segundos</span>
                  <button class="btn btn-sm btn-success" onclick="torneoManager.registrarResultadoEliminatoria('ronda-previa-2')" disabled>
                    ⚽ Registrar
                  </button>
                </div>
                <div class="flex items-center justify-center gap-6">
                  <div class="participant empty flex-1 max-w-xs">
                    <div class="text-center p-3 bg-gray-700/50 rounded-lg border border-gray-600">
                      <div id="ganador-partido-1" class="text-sm text-orange-400 font-medium">🏆 Ganador Partido 1</div>
                      <div class="text-xs text-gray-500 mt-1">(2°B vs 2°C)</div>
                    </div>
                  </div>
                  <div class="vs-indicator flex flex-col items-center justify-center px-4">
                    <div class="text-2xl text-blue-400 mb-1">⚔️</div>
                    <div class="text-sm text-blue-300 font-medium">VS</div>
                  </div>
                  <div class="participant ${segundos[0] ? 'filled' : 'empty'} flex-1 max-w-xs">
                    <div class="text-center p-3 bg-gray-700/50 rounded-lg border border-gray-600">
                      ${this.renderParticipante(segundos[0], '2° Grupo A')}
                    </div>
                  </div>
                </div>
                <div class="text-xs text-blue-300 mt-3 text-center font-medium">
                  💡 El ganador se clasifica para las semifinales como "Mejor Segundo Lugar"
                </div>
              </div>
            </div>
          </div>

          <!-- Semifinales -->
          <div class="ronda-section">
            <h4 class="text-lg font-bold text-white mb-4 flex items-center">
              🥉 Semifinales
              <span class="text-sm text-gray-400 ml-2">(Primeros lugares + Mejor segundo)</span>
            </h4>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <!-- Semifinal 1 -->
              <div class="match-preview bg-gray-800/50 border border-gray-600 rounded-lg p-4">
                <div class="flex justify-between items-center mb-3">
                  <span class="text-sm font-medium text-green-400">Semifinal 1</span>
                  <button class="btn btn-sm btn-success" onclick="torneoManager.registrarResultadoEliminatoria('semifinal-1')" disabled>
                    ⚽ Registrar
                  </button>
                </div>
                <div class="flex items-center justify-center gap-6">
                  <div class="participant ${primeros[0] ? 'filled' : 'empty'} flex-1 max-w-xs">
                    <div class="text-center p-3 bg-gray-700/50 rounded-lg border border-gray-600">
                      ${this.renderParticipante(primeros[0], '1° Grupo A')}
                    </div>
                  </div>
                  <div class="vs-indicator flex flex-col items-center justify-center px-4">
                    <div class="text-2xl text-green-400 mb-1">⚔️</div>
                    <div class="text-sm text-green-300 font-medium">VS</div>
                  </div>
                  <div class="participant empty flex-1 max-w-xs">
                    <div class="text-center p-3 bg-gray-700/50 rounded-lg border border-gray-600">
                      <div class="text-sm text-orange-400 font-medium">🏆 Mejor 2° Lugar</div>
                      <div class="text-xs text-gray-500 mt-1">(Ganador Partido 2)</div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Semifinal 2 -->
              <div class="match-preview bg-gray-800/50 border border-gray-600 rounded-lg p-4">
                <div class="flex justify-between items-center mb-3">
                  <span class="text-sm font-medium text-green-400">Semifinal 2</span>
                  <button class="btn btn-sm btn-success" onclick="torneoManager.registrarResultadoEliminatoria('semifinal-2')" disabled>
                    ⚽ Registrar
                  </button>
                </div>
                <div class="flex items-center justify-center gap-6">
                  <div class="participant ${primeros[1] ? 'filled' : 'empty'} flex-1 max-w-xs">
                    <div class="text-center p-3 bg-gray-700/50 rounded-lg border border-gray-600">
                      ${this.renderParticipante(primeros[1], '1° Grupo B')}
                    </div>
                  </div>
                  <div class="vs-indicator flex flex-col items-center justify-center px-4">
                    <div class="text-2xl text-green-400 mb-1">⚔️</div>
                    <div class="text-sm text-green-300 font-medium">VS</div>
                  </div>
                  <div class="participant ${primeros[2] ? 'filled' : 'empty'} flex-1 max-w-xs">
                    <div class="text-center p-3 bg-gray-700/50 rounded-lg border border-gray-600">
                      ${this.renderParticipante(primeros[2], '1° Grupo C')}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Partido por el Tercer Lugar -->
          <div class="ronda-section">
            <h4 class="text-lg font-bold text-white mb-4 flex items-center justify-center">
              🥉 Partido por el Tercer Lugar
              <span class="text-sm text-gray-400 ml-2">(Perdedores de semifinales)</span>
            </h4>
            <div class="match-preview bg-gradient-to-r from-orange-900/40 to-amber-900/40 border-2 border-orange-500/50 rounded-xl p-6 w-full">
              <div class="flex justify-between items-center mb-4">
                <span class="text-lg font-medium text-orange-400">🥉 Medalla de Bronce</span>
                <button class="btn btn-sm btn-warning" onclick="torneoManager.registrarResultadoEliminatoria('tercer-lugar')" disabled>
                  🥉 Registrar Resultado
                </button>
              </div>
              <div class="flex items-center justify-center gap-8">
                <div class="participant empty flex-1 max-w-xs">
                  <div class="text-center p-4 bg-gray-700/50 rounded-lg border border-gray-600">
                    <div class="text-sm text-gray-400 mb-2">Perdedor Semifinal 1</div>
                    <div class="text-lg font-bold text-gray-300">🥈 SF1</div>
                  </div>
                </div>
                <div class="vs-indicator flex flex-col items-center justify-center px-6">
                  <div class="text-3xl text-orange-400 mb-1">⚔️</div>
                  <div class="text-sm text-orange-300 font-medium">VS</div>
                </div>
                <div class="participant empty flex-1 max-w-xs">
                  <div class="text-center p-4 bg-gray-700/50 rounded-lg border border-gray-600">
                    <div class="text-sm text-gray-400 mb-2">Perdedor Semifinal 2</div>
                    <div class="text-lg font-bold text-gray-300">🥈 SF2</div>
                  </div>
                </div>
              </div>
              <div class="text-sm text-orange-300 mt-4 text-center font-medium">
                💡 Define quién obtiene la medalla de bronce del torneo
              </div>
            </div>
          </div>

          <!-- Final -->
          <div class="ronda-section">
            <h4 class="text-xl font-bold text-center text-transparent bg-gradient-to-r from-yellow-400 via-gold-400 to-orange-400 bg-clip-text mb-6 flex items-center justify-center">
              👑 GRAN FINAL
              <span class="text-sm text-gray-400 ml-3 bg-gradient-to-r from-gray-400 to-gray-500 bg-clip-text">(Ganadores de semifinales)</span>
            </h4>
            <div class="match-preview bg-gradient-to-br from-yellow-900/50 via-amber-900/50 to-orange-900/50 border-4 border-gradient-to-r border-yellow-400 rounded-2xl p-8 w-full shadow-2xl relative overflow-hidden">
              <!-- Efectos de fondo -->
              <div class="absolute inset-0 bg-gradient-to-br from-yellow-500/10 via-transparent to-orange-500/10 rounded-2xl"></div>
              <div class="absolute top-2 left-2 text-6xl opacity-20">🏆</div>
              <div class="absolute bottom-2 right-2 text-6xl opacity-20">👑</div>
              
              <div class="relative z-10">
                <div class="flex justify-between items-center mb-6">
                  <div class="flex items-center gap-3">
                    <span class="text-2xl">🏆</span>
                    <span class="text-2xl font-bold text-yellow-400">FINAL DEL TORNEO</span>
                    <span class="text-2xl">👑</span>
                  </div>
                  <button class="btn btn-lg btn-primary bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-bold border-2 border-yellow-400/50 shadow-lg" onclick="torneoManager.registrarResultadoEliminatoria('final')" disabled>
                    👑 Registrar Final
                  </button>
                </div>
                
                <div class="flex items-center justify-center gap-12">
                  <div class="participant empty flex-1 max-w-sm">
                    <div class="text-center p-6 bg-gradient-to-br from-gray-700/70 to-gray-800/70 rounded-xl border-2 border-yellow-400/30 shadow-lg">
                      <div class="text-sm text-yellow-300 mb-3 font-medium">🏆 Ganador Semifinal 1</div>
                      <div class="text-xl font-bold text-white">SF1 🏆</div>
                      <div class="text-xs text-gray-400 mt-2">Finalista</div>
                    </div>
                  </div>
                  
                  <div class="vs-indicator flex flex-col items-center justify-center px-8">
                    <div class="text-6xl text-yellow-400 mb-2 animate-pulse">⚡</div>
                    <div class="text-xl text-yellow-300 font-bold tracking-wider">VS</div>
                    <div class="text-sm text-gray-400 mt-1">FINAL</div>
                  </div>
                  
                  <div class="participant empty flex-1 max-w-sm">
                    <div class="text-center p-6 bg-gradient-to-br from-gray-700/70 to-gray-800/70 rounded-xl border-2 border-yellow-400/30 shadow-lg">
                      <div class="text-sm text-yellow-300 mb-3 font-medium">🏆 Ganador Semifinal 2</div>
                      <div class="text-xl font-bold text-white">SF2 🏆</div>
                      <div class="text-xs text-gray-400 mt-2">Finalista</div>
                    </div>
                  </div>
                </div>
                
                <div class="text-center mt-6">
                  <div class="text-lg text-yellow-300 font-bold mb-2">
                    👑 La batalla final por el título de campeón
                  </div>
                  <div class="text-sm text-gray-400">
                    El ganador será coronado como el campeón absoluto del torneo
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Ganador del Torneo -->
          <div class="ronda-section">
            <h4 class="text-2xl font-bold text-center text-transparent bg-gradient-to-r from-yellow-400 via-yellow-300 to-yellow-500 bg-clip-text mb-6">
              🏆 CAMPEÓN DEL TORNEO 🏆
            </h4>
            <div class="champion-container bg-gradient-to-br from-yellow-900/60 via-amber-900/60 to-orange-900/60 border-4 border-yellow-400 rounded-3xl p-8 w-full shadow-2xl relative overflow-hidden">
              <!-- Efectos de fondo -->
              <div class="absolute inset-0 bg-gradient-to-br from-yellow-500/20 via-transparent to-orange-500/20 rounded-3xl"></div>
              <div class="absolute -top-4 -left-4 text-8xl opacity-30 rotate-12">🏆</div>
              <div class="absolute -bottom-4 -right-4 text-8xl opacity-30 -rotate-12">👑</div>
              <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-9xl opacity-10">⭐</div>
              
              <div class="relative z-10 text-center">
                <div class="champion-content" id="champion-content">
                  <!-- Antes de que termine la final -->
                  <div class="waiting-champion">
                    <div class="text-6xl mb-4">🏆</div>
                    <div class="text-2xl font-bold text-yellow-400 mb-3">
                      Esperando al Campeón
                    </div>
                    <div class="text-gray-300 text-lg mb-4">
                      El ganador de la final será coronado aquí
                    </div>
                    <div class="flex justify-center items-center gap-2 text-yellow-300">
                      <span class="animate-pulse">⭐</span>
                      <span class="text-sm">Completa la final para revelar al campeón</span>
                      <span class="animate-pulse">⭐</span>
                    </div>
                  </div>
                  
                  <!-- Después de que termine la final (se mostrará dinámicamente) -->
                  <div class="champion-revealed hidden">
                    <div class="text-8xl mb-6">👑</div>
                    <div class="text-3xl font-bold text-yellow-400 mb-2">
                      ¡CAMPEÓN!
                    </div>
                    <div class="champion-name text-4xl font-black text-white mb-2" id="champion-name">
                      [NOMBRE DEL GANADOR]
                    </div>
                    <div class="champion-team text-xl text-yellow-300 mb-4" id="champion-team">
                      Equipo: [EQUIPO]
                    </div>
                    <div class="celebration-text text-lg text-gray-300 mb-6">
                      🎉 ¡Felicidades por conquistar el torneo! 🎉
                    </div>
                    <div class="trophies flex justify-center gap-4 text-4xl">
                      <span class="animate-bounce">🏆</span>
                      <span class="animate-pulse">⭐</span>
                      <span class="animate-bounce">👑</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
    }

    private obtenerClasificadosPorPosicion(clasificados: any[], posicion: number): any[] {
      // Agrupar clasificados por grupo
      const porGrupo: { [key: string]: any[] } = {};
      
      clasificados.forEach(c => {
        if (!porGrupo[c.grupo]) {
          porGrupo[c.grupo] = [];
        }
        porGrupo[c.grupo].push(c);
      });
      
      // Obtener el clasificado en la posición específica de cada grupo
      const resultado: any[] = [];
      Object.keys(porGrupo).sort().forEach(grupo => {
        const clasificadosGrupo = porGrupo[grupo].sort((a, b) => a.posicion - b.posicion);
        const jugadorEnPosicion = clasificadosGrupo.find(c => c.posicion === posicion);
        if (jugadorEnPosicion) {
          resultado.push(jugadorEnPosicion);
        }
      });
      
      return resultado;
    }

    private renderParticipante(participante: any, placeholder: string): string {
      if (participante) {
        return `
          <div class="flex items-center space-x-2">
            <img src="/img/equipos/${participante.equipo}.png" alt="${participante.equipo}" 
                 class="w-6 h-6 object-contain" onerror="this.src='/img/equipos/default.png'">
            <div>
              <div class="text-white font-medium text-sm">${participante.nombre}</div>
              <div class="text-gray-400 text-xs">${participante.equipo}</div>
              <div class="text-blue-400 text-xs">${participante.grupo} - ${participante.posicion}°</div>
            </div>
          </div>
        `;
      } else {
        return `<div class="text-xs text-gray-500">${placeholder}</div>`;
      }
    }

    private generarExplicacionEstructura(estructura: any, totalClasificados: number): string {
      switch (estructura.tipo) {
        case 'final':
          return `<p><strong>🎯 Final directa:</strong> Solo 2 clasificados compiten directamente en la final.</p>`;
        
        case 'semifinal':
          return `
            <p><strong>🎯 Semifinales directas para 4 clasificados:</strong></p>
            <p>• Estructura clásica: 4 participantes se enfrentan en 2 semifinales</p>
            <p>• Los ganadores avanzan a la final</p>
          `;
        
        case 'especial-5':
          return `
            <p><strong>🎯 Estrategia optimizada para 5 clasificados:</strong></p>
            <p>• <strong>Ronda previa:</strong> 4° vs 5° lugar (1 partido)</p>
            <p>• <strong>Semifinales:</strong> 1° vs Ganador previa, 2° vs 3°</p>
            <p>• Esta estructura evita byes múltiples y mantiene la competencia equilibrada</p>
          `;
        
        case 'especial-6':
          return `
            <p><strong>🎯 Estrategia optimizada para 6 clasificados:</strong></p>
            <p>• <strong>Ventaja primeros lugares:</strong> Los 3 primeros lugares de cada grupo pasan directo a semifinales</p>
            <p>• <strong>Competencia segundos lugares:</strong> 2°B vs 2°C, luego el ganador vs 2°A</p>
            <p>• <strong>Semifinales equilibradas:</strong> 1°A vs Ganador(2° lugares), 1°B vs 1°C</p>
            <p>• Esta estructura recompensa el primer lugar y mantiene la competencia entre segundos lugares</p>
          `;
        
        case 'especial-7':
          return `
            <p><strong>🎯 Estrategia optimizada para 7 clasificados:</strong></p>
            <p>• <strong>Bye especial:</strong> El 1° lugar pasa directo a semifinales</p>
            <p>• <strong>Ronda previa:</strong> Los otros 6 participantes se enfrentan en 3 partidos</p>
            <p>• <strong>Semifinales:</strong> 1° lugar vs ganador P1, ganador P2 vs ganador P3</p>
            <p>• Esta estructura premia al mejor clasificado con descanso automático</p>
          `;
        
        case 'bracket-estandar':
          return `
            <p><strong>🎯 Bracket estándar para ${totalClasificados} participantes:</strong></p>
            <p>• Estructura clásica de eliminación directa</p>
            <p>• Emparejamientos balanceados según ranking</p>
            <p>• ${estructura.potencia} espacios en el bracket (algunos con byes si es necesario)</p>
          `;
        
        default:
          return `<p>Estructura estándar de eliminatorias para ${totalClasificados} participantes.</p>`;
      }
    }

    // Métodos auxiliares para otras estructuras
    private generarFinalDirecta(clasificados: any[], esIdaVuelta: boolean): string {
      return `<div class="text-center text-gray-400">Final directa entre 2 clasificados</div>`;
    }

    private generarSemifinalesDirectas(clasificados: any[], esIdaVuelta: boolean): string {
      return `<div class="text-center text-gray-400">Semifinales directas entre 4 clasificados</div>`;
    }

    private generarEstructura5Clasificados(clasificados: any[], esIdaVuelta: boolean): string {
      // Para 5 clasificados: ronda previa 4° vs 5°, luego semifinales con 1°, 2°, 3° + ganador
      const ordenados = [...clasificados].sort((a, b) => {
        if (a.grupo !== b.grupo) return a.grupo.localeCompare(b.grupo);
        return a.posicion - b.posicion;
      });

      return `
        <div class="estructura-especial-5">
          <!-- Ronda Previa -->
          <div class="ronda-section mb-8">
            <h5 class="text-center text-lg font-semibold text-yellow-400 mb-4">🔄 Ronda Previa</h5>
            <div class="flex justify-center">
              <div class="match-preview bg-gray-700/50 rounded-lg p-4 max-w-md">
                <div class="text-center text-sm text-gray-400 mb-2">Eliminación directa</div>
                <div class="flex items-center justify-between">
                  <div class="participant ${ordenados[3] ? 'filled' : 'empty'}">
                    ${this.renderParticipante(ordenados[3], '4° Lugar')}
                  </div>
                  <div class="vs-indicator">
                    <span class="text-gray-400">vs</span>
                    ${esIdaVuelta ? '<div class="text-xs text-blue-400">I/V</div>' : ''}
                  </div>
                  <div class="participant ${ordenados[4] ? 'filled' : 'empty'}">
                    ${this.renderParticipante(ordenados[4], '5° Lugar')}
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Semifinales -->
          <div class="ronda-section mb-8">
            <h5 class="text-center text-lg font-semibold text-green-400 mb-4">🥉 Semifinales</h5>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <!-- Semifinal 1 -->
              <div class="match-preview bg-gray-700/50 rounded-lg p-4">
                <div class="text-center text-sm text-gray-400 mb-2">Semifinal 1</div>
                <div class="flex items-center justify-between">
                  <div class="participant ${ordenados[0] ? 'filled' : 'empty'}">
                    ${this.renderParticipante(ordenados[0], '1° Lugar')}
                  </div>
                  <div class="vs-indicator">
                    <span class="text-gray-400">vs</span>
                    ${esIdaVuelta ? '<div class="text-xs text-blue-400">I/V</div>' : ''}
                  </div>
                  <div class="participant empty">
                    <div class="text-xs text-orange-400">Ganador Ronda Previa</div>
                  </div>
                </div>
              </div>
              
              <!-- Semifinal 2 -->
              <div class="match-preview bg-gray-700/50 rounded-lg p-4">
                <div class="text-center text-sm text-gray-400 mb-2">Semifinal 2</div>
                <div class="flex items-center justify-between">
                  <div class="participant ${ordenados[1] ? 'filled' : 'empty'}">
                    ${this.renderParticipante(ordenados[1], '2° Lugar')}
                  </div>
                  <div class="vs-indicator">
                    <span class="text-gray-400">vs</span>
                    ${esIdaVuelta ? '<div class="text-xs text-blue-400">I/V</div>' : ''}
                  </div>
                  <div class="participant ${ordenados[2] ? 'filled' : 'empty'}">
                    ${this.renderParticipante(ordenados[2], '3° Lugar')}
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Final -->
          <div class="ronda-section">
            <h5 class="text-center text-lg font-semibold text-yellow-400 mb-4">🏆 Final</h5>
            <div class="flex justify-center">
              <div class="match-preview bg-gradient-to-r from-yellow-900/30 to-orange-900/30 rounded-lg p-6 border border-yellow-600/30">
                <div class="text-center text-sm text-gray-400 mb-2">Final</div>
                <div class="flex items-center justify-between">
                  <div class="participant empty">
                    <div class="text-xs text-orange-400">Ganador SF1</div>
                  </div>
                  <div class="vs-indicator px-6">
                    <span class="text-yellow-400 text-xl">⚡</span>
                    ${esIdaVuelta ? '<div class="text-xs text-blue-400">I/V</div>' : ''}
                  </div>
                  <div class="participant empty">
                    <div class="text-xs text-orange-400">Ganador SF2</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
    }

    private generarEstructura7Clasificados(clasificados: any[], esIdaVuelta: boolean): string {
      // Para 7 clasificados: 1° lugar bye, 6 participantes en ronda previa
      const ordenados = [...clasificados].sort((a, b) => {
        if (a.grupo !== b.grupo) return a.grupo.localeCompare(b.grupo);
        return a.posicion - b.posicion;
      });

      return `
        <div class="estructura-especial-7">
          <!-- Ronda Previa -->
          <div class="ronda-section mb-8">
            <h5 class="text-center text-lg font-semibold text-yellow-400 mb-4">🔄 Ronda Previa</h5>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              ${[0, 1, 2].map(i => `
                <div class="match-preview bg-gray-700/50 rounded-lg p-4">
                  <div class="text-center text-sm text-gray-400 mb-2">Partido ${i + 1}</div>
                  <div class="flex items-center justify-between">
                    <div class="participant ${ordenados[i * 2 + 1] ? 'filled' : 'empty'}">
                      ${this.renderParticipante(ordenados[i * 2 + 1], `${i * 2 + 2}° Lugar`)}
                    </div>
                    <div class="vs-indicator">
                      <span class="text-gray-400">vs</span>
                      ${esIdaVuelta ? '<div class="text-xs text-blue-400">I/V</div>' : ''}
                    </div>
                    <div class="participant ${ordenados[i * 2 + 2] ? 'filled' : 'empty'}">
                      ${this.renderParticipante(ordenados[i * 2 + 2], `${i * 2 + 3}° Lugar`)}
                    </div>
                  </div>
                </div>
              `).join('')}
            </div>
          </div>

          <!-- Semifinales -->
          <div class="ronda-section mb-8">
            <h5 class="text-center text-lg font-semibold text-green-400 mb-4">🥉 Semifinales</h5>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <!-- Semifinal 1 -->
              <div class="match-preview bg-gray-700/50 rounded-lg p-4">
                <div class="text-center text-sm text-gray-400 mb-2">Semifinal 1</div>
                <div class="flex items-center justify-between">
                  <div class="participant ${ordenados[0] ? 'filled' : 'empty'}">
                    ${this.renderParticipante(ordenados[0], '1° Lugar (Bye)')}
                  </div>
                  <div class="vs-indicator">
                    <span class="text-gray-400">vs</span>
                    ${esIdaVuelta ? '<div class="text-xs text-blue-400">I/V</div>' : ''}
                  </div>
                  <div class="participant empty">
                    <div class="text-xs text-orange-400">Ganador P1</div>
                  </div>
                </div>
              </div>
              
              <!-- Semifinal 2 -->
              <div class="match-preview bg-gray-700/50 rounded-lg p-4">
                <div class="text-center text-sm text-gray-400 mb-2">Semifinal 2</div>
                <div class="flex items-center justify-between">
                  <div class="participant empty">
                    <div class="text-xs text-orange-400">Ganador P2</div>
                  </div>
                  <div class="vs-indicator">
                    <span class="text-gray-400">vs</span>
                    ${esIdaVuelta ? '<div class="text-xs text-blue-400">I/V</div>' : ''}
                  </div>
                  <div class="participant empty">
                    <div class="text-xs text-orange-400">Ganador P3</div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Final -->
          <div class="ronda-section">
            <h5 class="text-center text-lg font-semibold text-yellow-400 mb-4">🏆 Final</h5>
            <div class="flex justify-center">
              <div class="match-preview bg-gradient-to-r from-yellow-900/30 to-orange-900/30 rounded-lg p-6 border border-yellow-600/30">
                <div class="text-center text-sm text-gray-400 mb-2">Final</div>
                <div class="flex items-center justify-between">
                  <div class="participant empty">
                    <div class="text-xs text-orange-400">Ganador SF1</div>
                  </div>
                  <div class="vs-indicator px-6">
                    <span class="text-yellow-400 text-xl">⚡</span>
                    ${esIdaVuelta ? '<div class="text-xs text-blue-400">I/V</div>' : ''}
                  </div>
                  <div class="participant empty">
                    <div class="text-xs text-orange-400">Ganador SF2</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
    }

    private generarBracketEstandar(clasificados: any[], potencia: number, esIdaVuelta: boolean): string {
      return `<div class="text-center text-gray-400">Bracket estándar de ${potencia} participantes</div>`;
    }

    private generarEstructuraBracket(clasificados: any[], totalEsperados: number, esIdaVuelta: boolean): string {
      // Obtener cuántas rondas habrá
      const rondas = Math.ceil(Math.log2(totalEsperados));
      const nombresRondas = this.obtenerNombresRondas(totalEsperados);
      
      let bracketHTML = '<div class="bracket-rounds flex justify-between gap-4 overflow-x-auto pb-4">';
      
      for (let ronda = 0; ronda < rondas; ronda++) {
        const participantesRonda = Math.pow(2, rondas - ronda);
        const esPrimeraRonda = ronda === 0;
        
        bracketHTML += `
          <div class="bracket-round min-w-0 flex-1">
            <h6 class="text-center text-sm font-semibold text-gray-300 mb-4">
              ${nombresRondas[ronda]}
            </h6>
            <div class="space-y-4">
              ${this.generarPartidosRonda(participantesRonda / 2, esPrimeraRonda ? clasificados : [], esIdaVuelta)}
            </div>
          </div>
        `;
      }
      
      bracketHTML += '</div>';
      return bracketHTML;
    }

    private generarPartidosRonda(numPartidos: number, participantes: any[], esIdaVuelta: boolean): string {
      let partidosHTML = '';
      
      for (let i = 0; i < numPartidos; i++) {
        const participante1 = participantes[i * 2];
        const participante2 = participantes[i * 2 + 1];
        
        partidosHTML += `
          <div class="bracket-match bg-gray-700/50 rounded-lg p-3 border border-gray-600">
            <div class="match-participant ${participante1 ? 'filled' : 'empty'}">
              ${participante1 ? `
                <div class="flex items-center space-x-2">
                  <img src="/img/equipos/${participante1.equipo}.png" alt="${participante1.equipo}" 
                       class="w-4 h-4 object-contain" onerror="this.src='/img/equipos/default.png'">
                  <span class="text-xs text-white truncate">${participante1.nombre}</span>
                </div>
              ` : '<div class="text-xs text-gray-500">Por definir</div>'}
            </div>
            
            <div class="match-vs text-center py-1">
              <span class="text-xs text-gray-400">vs</span>
              ${esIdaVuelta ? '<div class="text-xs text-blue-400">I/V</div>' : ''}
            </div>
            
            <div class="match-participant ${participante2 ? 'filled' : 'empty'}">
              ${participante2 ? `
                <div class="flex items-center space-x-2">
                  <img src="/img/equipos/${participante2.equipo}.png" alt="${participante2.equipo}" 
                       class="w-4 h-4 object-contain" onerror="this.src='/img/equipos/default.png'">
                  <span class="text-xs text-white truncate">${participante2.nombre}</span>
                </div>
              ` : '<div class="text-xs text-gray-500">Por definir</div>'}
            </div>
          </div>
        `;
      }
      
      return partidosHTML;
    }

    private obtenerNombresRondas(totalParticipantes: number): string[] {
      const rondas = Math.ceil(Math.log2(totalParticipantes));
      const nombres: string[] = [];
      
      for (let i = 0; i < rondas; i++) {
        const participantesEnRonda = Math.pow(2, rondas - i);
        
        if (participantesEnRonda === 2) {
          nombres.push('🏆 Final');
        } else if (participantesEnRonda === 4) {
          nombres.push('🥉 Semifinal');
        } else if (participantesEnRonda === 8) {
          nombres.push('🏅 Cuartos');
        } else if (participantesEnRonda === 16) {
          nombres.push('⚽ Octavos');
        } else {
          nombres.push(`R${i + 1}`);
        }
      }
      
      return nombres;
    }

    private mostrarBracketActivo(): void {
      // TODO: Implementar bracket activo cuando ya estén en eliminatorias
      const container = document.getElementById('bracket-eliminatorias');
      if (container) {
        container.innerHTML = `
          <div class="text-center">
            <h4 class="text-xl font-bold text-white mb-4">🏆 Eliminatorias en Curso</h4>
            <p class="text-gray-400">Bracket activo de eliminatorias (en desarrollo)</p>
          </div>
        `;
      }
    }

    private actualizarEstadisticas(): void {
      const container = document.getElementById('tab-estadisticas');
      if (!container) return;

      const estadisticas = this.calcularEstadisticasCompletas();
      
      container.innerHTML = `
        <div class="space-y-6">
          <h3 class="text-xl font-bold text-white">📈 Estadísticas del Torneo</h3>
          
          <!-- Resumen General -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div class="bg-gradient-to-r from-blue-600 to-blue-700 rounded-xl p-4 text-white">
              <h4 class="text-sm font-semibold mb-2">⚽ Goles Totales</h4>
              <p class="text-2xl font-bold">${estadisticas.golesTotales}</p>
              <p class="text-blue-200 text-xs">En ${estadisticas.partidosJugados} partidos</p>
            </div>
            
            <div class="bg-gradient-to-r from-green-600 to-green-700 rounded-xl p-4 text-white">
              <h4 class="text-sm font-semibold mb-2">📊 Promedio por Partido</h4>
              <p class="text-2xl font-bold">${estadisticas.promedioGoles}</p>
              <p class="text-green-200 text-xs">goles/partido</p>
            </div>
            
            <div class="bg-gradient-to-r from-purple-600 to-purple-700 rounded-xl p-4 text-white">
              <h4 class="text-sm font-semibold mb-2">🎯 Partido + Goleador</h4>
              <p class="text-lg font-bold">${estadisticas.partidoMasGoleador.resultado}</p>
              <p class="text-purple-200 text-xs">${estadisticas.partidoMasGoleador.equipos}</p>
            </div>
            
            <div class="bg-gradient-to-r from-orange-600 to-orange-700 rounded-xl p-4 text-white">
              <h4 class="text-sm font-semibold mb-2">🛡️ Mejor Defensiva</h4>
              <p class="text-xl font-bold">${estadisticas.mejorDefensiva.jugador}</p>
              <p class="text-orange-200 text-xs">${estadisticas.mejorDefensiva.golesContra} goles recibidos</p>
            </div>
          </div>

          <!-- Reconocimientos Principales -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- Bota de Oro -->
            <div class="bg-gradient-to-br from-yellow-900/50 to-amber-900/50 border-2 border-yellow-500 rounded-xl p-6 bota-oro">
              <div class="text-center mb-4">
                <div class="text-4xl mb-2">🥇</div>
                <h4 class="text-xl font-bold text-yellow-400">BOTA DE ORO</h4>
                <p class="text-yellow-300 text-sm">Máximo Goleador</p>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-white mb-1">${estadisticas.botaDeOro.jugador}</div>
                <div class="text-lg text-yellow-300 mb-2">${estadisticas.botaDeOro.equipo}</div>
                <div class="flex justify-center items-center gap-2">
                  <span class="text-3xl font-black text-yellow-400">${estadisticas.botaDeOro.goles}</span>
                  <span class="text-yellow-300">goles</span>
                </div>
              </div>
            </div>

            <!-- Mejor Arquero -->
            <div class="bg-gradient-to-br from-blue-900/50 to-cyan-900/50 border-2 border-blue-500 rounded-xl p-6 guantes-oro">
              <div class="text-center mb-4">
                <div class="text-4xl mb-2">🧤</div>
                <h4 class="text-xl font-bold text-blue-400">GUANTES DE ORO</h4>
                <p class="text-blue-300 text-sm">Mejor Arquero</p>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-white mb-1">${estadisticas.guantesDeOro.jugador}</div>
                <div class="text-lg text-blue-300 mb-2">${estadisticas.guantesDeOro.equipo}</div>
                <div class="flex justify-center items-center gap-2">
                  <span class="text-2xl font-black text-blue-400">${estadisticas.guantesDeOro.golesContra}</span>
                  <span class="text-blue-300">goles recibidos</span>
                </div>
                <div class="text-xs text-gray-400 mt-1">Promedio: ${estadisticas.guantesDeOro.promedio} por partido</div>
              </div>
            </div>
          </div>

          <!-- Bota de Oro Fase de Grupos -->
          <div class="bg-gradient-to-br from-amber-900/50 to-yellow-900/50 border-2 border-amber-500 rounded-xl p-6">
            <div class="text-center mb-4">
              <div class="text-4xl mb-2">🥇</div>
              <h4 class="text-xl font-bold text-amber-400">BOTA DE ORO FASE DE GRUPOS</h4>
              <p class="text-amber-300 text-sm">Máximo Goleador en Grupos</p>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-white mb-1">${estadisticas.botaDeOroGrupos.jugador}</div>
              <div class="text-lg text-amber-300 mb-2">${estadisticas.botaDeOroGrupos.equipo}</div>
              <div class="flex justify-center items-center gap-2">
                <span class="text-3xl font-black text-amber-400">${estadisticas.botaDeOroGrupos.goles}</span>
                <span class="text-amber-300">goles en grupos</span>
              </div>
            </div>
          </div>

          <!-- Ranking de Goleadores -->
          <div class="bg-gray-800/50 rounded-xl p-6">
            <h4 class="text-lg font-bold text-white mb-4 flex items-center">
              ⚽ Ranking de Goleadores
            </h4>
            <div class="overflow-x-auto">
              <table class="w-full">
                <thead>
                  <tr class="border-b border-gray-600">
                    <th class="text-left py-2 text-gray-400 text-sm">Pos</th>
                    <th class="text-left py-2 text-gray-400 text-sm">Jugador</th>
                    <th class="text-left py-2 text-gray-400 text-sm">Equipo</th>
                    <th class="text-center py-2 text-gray-400 text-sm">Goles</th>
                    <th class="text-center py-2 text-gray-400 text-sm">Partidos</th>
                    <th class="text-center py-2 text-gray-400 text-sm">Promedio</th>
                  </tr>
                </thead>
                <tbody>
                  ${estadisticas.rankingGoleadores.map((jugador: EstadisticaJugador, index: number) => `
                    <tr class="border-b border-gray-700/50 hover:bg-gray-700/30 ranking-item">
                      <td class="py-2">
                        <span class="font-bold ${index === 0 ? 'text-yellow-400' : index === 1 ? 'text-gray-300' : index === 2 ? 'text-orange-400' : 'text-gray-400'}">
                          ${index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : index + 1}
                        </span>
                      </td>
                      <td class="py-2 font-medium text-white">${jugador.nombre}</td>
                      <td class="py-2 text-gray-300">${jugador.equipo}</td>
                      <td class="py-2 text-center font-bold ${index === 0 ? 'text-yellow-400' : 'text-white'}">${jugador.goles}</td>
                      <td class="py-2 text-center text-gray-400">${jugador.partidos}</td>
                      <td class="py-2 text-center text-gray-400">${jugador.promedio}</td>
                    </tr>
                  `).join('')}
                </tbody>
              </table>
            </div>
          </div>

          <!-- Estadísticas por Equipo -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- Mejores Ofensivas -->
            <div class="bg-gray-800/50 rounded-xl p-6">
              <h4 class="text-lg font-bold text-white mb-4 flex items-center">
                ⚔️ Mejores Ofensivas
              </h4>
              <div class="space-y-3">
                ${estadisticas.mejoresOfensivas.slice(0, 5).map((equipo: EquipoOfensivo, index: number) => `
                  <div class="flex items-center justify-between p-3 bg-gray-700/50 rounded-lg stats-card">
                    <div class="flex items-center gap-3">
                      <span class="font-bold ${index === 0 ? 'text-yellow-400' : index === 1 ? 'text-gray-300' : index === 2 ? 'text-orange-400' : 'text-gray-400'}">
                        ${index + 1}°
                      </span>
                      <div>
                        <div class="font-medium text-white">${equipo.jugador}</div>
                        <div class="text-xs text-gray-400">${equipo.equipo}</div>
                      </div>
                    </div>
                    <div class="text-right">
                      <div class="font-bold text-green-400">${equipo.golesFavor}</div>
                      <div class="text-xs text-gray-400">goles</div>
                    </div>
                  </div>
                `).join('')}
              </div>
            </div>

            <!-- Mejores Defensivas -->
            <div class="bg-gray-800/50 rounded-xl p-6">
              <h4 class="text-lg font-bold text-white mb-4 flex items-center">
                🛡️ Mejores Defensivas
              </h4>
              <div class="space-y-3">
                ${estadisticas.mejoresDefensivas.slice(0, 5).map((equipo: EquipoDefensivo, index: number) => `
                  <div class="flex items-center justify-between p-3 bg-gray-700/50 rounded-lg stats-card">
                    <div class="flex items-center gap-3">
                      <span class="font-bold ${index === 0 ? 'text-yellow-400' : index === 1 ? 'text-gray-300' : index === 2 ? 'text-orange-400' : 'text-gray-400'}">
                        ${index + 1}°
                      </span>
                      <div>
                        <div class="font-medium text-white">${equipo.jugador}</div>
                        <div class="text-xs text-gray-400">${equipo.equipo}</div>
                      </div>
                    </div>
                    <div class="text-right">
                      <div class="font-bold text-blue-400">${equipo.golesContra}</div>
                      <div class="text-xs text-gray-400">recibidos</div>
                    </div>
                  </div>
                `).join('')}
              </div>
            </div>
          </div>

          <!-- Otros Reconocimientos -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <!-- Mayor Diferencia de Goles -->
            <div class="bg-gradient-to-r from-green-900/50 to-emerald-900/50 border border-green-500/50 rounded-lg p-4 text-center stats-card">
              <div class="text-2xl mb-2">🎯</div>
              <h5 class="font-bold text-green-400 mb-1">MEJOR DIFERENCIA</h5>
              <div class="text-lg font-bold text-white">${estadisticas.mejorDiferencia.jugador}</div>
              <div class="text-sm text-green-300">+${estadisticas.mejorDiferencia.diferencia} goles</div>
            </div>

            <!-- Más Partidos Ganados -->
            <div class="bg-gradient-to-r from-purple-900/50 to-violet-900/50 border border-purple-500/50 rounded-lg p-4 text-center stats-card">
              <div class="text-2xl mb-2">🏆</div>
              <h5 class="font-bold text-purple-400 mb-1">MÁS VICTORIAS</h5>
              <div class="text-lg font-bold text-white">${estadisticas.masVictorias.jugador}</div>
              <div class="text-sm text-purple-300">${estadisticas.masVictorias.ganados} victorias</div>
            </div>
          </div>

          <!-- Comparador de Jugadores -->
          <div class="bg-gray-800/50 rounded-xl p-6 mt-6">
            <h4 class="text-lg font-bold text-white mb-4 flex items-center">
              ⚔️ Comparador de Jugadores
            </h4>
            <div class="space-y-4">
              <div class="flex gap-3">
                <select id="torneo-jugador-1" class="flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white">
                  <option value="">Seleccionar Jugador 1</option>
                </select>
                <span class="self-center text-gray-400">VS</span>
                <select id="torneo-jugador-2" class="flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white">
                  <option value="">Seleccionar Jugador 2</option>
                </select>
              </div>
              <div id="torneo-comparacion-resultado" class="text-white">
                <div class="text-center text-gray-400 py-4">Selecciona dos jugadores para comparar sus estadísticas</div>
              </div>
            </div>
          </div>
        </div>
      `;

      // Poblar selectores y agregar event listeners para el comparador
      setTimeout(() => {
        const select1 = document.getElementById('torneo-jugador-1') as HTMLSelectElement;
        const select2 = document.getElementById('torneo-jugador-2') as HTMLSelectElement;
        
        if (select1 && select2 && estadisticas.statsJugadores) {
          // Poblar opciones
          Object.keys(estadisticas.statsJugadores).forEach(id => {
            const option1 = new Option(estadisticas.statsJugadores[id].nombre, id);
            const option2 = new Option(estadisticas.statsJugadores[id].nombre, id);
            select1.add(option1);
            select2.add(option2);
          });

          // Guardar estadísticas para el comparador
          this.statsCalculadas = { ...estadisticas.statsJugadores };

          // Agregar event listeners
          const compararJugadores = () => {
            if (select1.value && select2.value && select1.value !== select2.value) {
              const jugador1 = this.statsCalculadas[select1.value];
              const jugador2 = this.statsCalculadas[select2.value];
              this.mostrarComparacionTorneo(jugador1, jugador2);
            }
          };

          select1.addEventListener('change', compararJugadores);
          select2.addEventListener('change', compararJugadores);
        }
      }, 100);
    }

    private calcularEstadisticasCompletas(): any {
      const partidosJugados = this.partidos.filter(p => p.jugado);
      const golesTotales = partidosJugados.reduce((total, p) => total + (p.golesLocal || 0) + (p.golesVisitante || 0), 0);
      const promedioGoles = partidosJugados.length > 0 ? (golesTotales / partidosJugados.length).toFixed(1) : '0.0';

      // Calcular estadísticas por jugador
      const statsJugadores: { [key: string]: any } = {};
      
      partidosJugados.forEach(partido => {
        // Estadísticas jugador local
        if (!statsJugadores[partido.jugadorLocal]) {
          statsJugadores[partido.jugadorLocal] = {
            nombre: partido.jugadorLocal,
            equipo: partido.equipoLocal,
            goles: 0,
            golesContra: 0,
            partidos: 0,
            ganados: 0,
            empatados: 0,
            perdidos: 0
          };
        }
        
        // Estadísticas jugador visitante
        if (!statsJugadores[partido.jugadorVisitante]) {
          statsJugadores[partido.jugadorVisitante] = {
            nombre: partido.jugadorVisitante,
            equipo: partido.equipoVisitante,
            goles: 0,
            golesContra: 0,
            partidos: 0,
            ganados: 0,
            empatados: 0,
            perdidos: 0
          };
        }

        // Actualizar estadísticas
        const statsLocal = statsJugadores[partido.jugadorLocal];
        const statsVisitante = statsJugadores[partido.jugadorVisitante];
        
        statsLocal.goles += partido.golesLocal || 0;
        statsLocal.golesContra += partido.golesVisitante || 0;
        statsLocal.partidos++;
        
        statsVisitante.goles += partido.golesVisitante || 0;
        statsVisitante.golesContra += partido.golesLocal || 0;
        statsVisitante.partidos++;
        
        // Determinar resultado
        if ((partido.golesLocal || 0) > (partido.golesVisitante || 0)) {
          statsLocal.ganados++;
          statsVisitante.perdidos++;
        } else if ((partido.golesLocal || 0) < (partido.golesVisitante || 0)) {
          statsVisitante.ganados++;
          statsLocal.perdidos++;
        } else {
          statsLocal.empatados++;
          statsVisitante.empatados++;
        }
      });

      // Ranking de goleadores
      const rankingGoleadores = Object.values(statsJugadores)
        .map((jugador: any) => ({
          ...jugador,
          promedio: jugador.partidos > 0 ? (jugador.goles / jugador.partidos).toFixed(1) : '0.0',
          diferencia: jugador.goles - jugador.golesContra
        }))
        .sort((a, b) => b.goles - a.goles);

      // Mejores ofensivas
      const mejoresOfensivas = Object.values(statsJugadores)
        .map((jugador: any) => ({
          jugador: jugador.nombre,
          equipo: jugador.equipo,
          golesFavor: jugador.goles
        }))
        .sort((a, b) => b.golesFavor - a.golesFavor);

      // Mejores defensivas
      const mejoresDefensivas = Object.values(statsJugadores)
        .map((jugador: any) => ({
          jugador: jugador.nombre,
          equipo: jugador.equipo,
          golesContra: jugador.golesContra,
          promedio: jugador.partidos > 0 ? (jugador.golesContra / jugador.partidos).toFixed(1) : '0.0'
        }))
        .sort((a, b) => a.golesContra - b.golesContra);

      // Partido más goleador
      const partidoMasGoleador = partidosJugados.reduce((max, partido) => {
        const golesPartido = (partido.golesLocal || 0) + (partido.golesVisitante || 0);
        const golesMax = (max.golesLocal || 0) + (max.golesVisitante || 0);
        return golesPartido > golesMax ? partido : max;
      }, partidosJugados[0] || { golesLocal: 0, golesVisitante: 0, jugadorLocal: '-', jugadorVisitante: '-' });

      // Calcular Bota de Oro de Fase de Grupos
      const partidosGrupos = partidosJugados.filter(p => p.grupo); // Solo partidos que tienen grupo asignado
      const golesGruposJugadores: { [key: string]: { nombre: string, goles: number, equipo: string } } = {};
      
      partidosGrupos.forEach(partido => {
        if (partido.golesLocal !== undefined) {
          if (!golesGruposJugadores[partido.jugadorLocal]) {
            golesGruposJugadores[partido.jugadorLocal] = { 
              nombre: partido.jugadorLocal, 
              goles: 0, 
              equipo: partido.equipoLocal || '-' 
            };
          }
          golesGruposJugadores[partido.jugadorLocal].goles += partido.golesLocal;
        }
        
        if (partido.golesVisitante !== undefined) {
          if (!golesGruposJugadores[partido.jugadorVisitante]) {
            golesGruposJugadores[partido.jugadorVisitante] = { 
              nombre: partido.jugadorVisitante, 
              goles: 0, 
              equipo: partido.equipoVisitante || '-' 
            };
          }
          golesGruposJugadores[partido.jugadorVisitante].goles += partido.golesVisitante;
        }
      });

      const botaDeOroGrupos = Object.values(golesGruposJugadores).reduce((max, jugador) => 
        jugador.goles > max.goles ? jugador : max, 
        { nombre: '-', equipo: '-', goles: 0 }
      );

      return {
        golesTotales,
        promedioGoles,
        partidosJugados: partidosJugados.length,
        rankingGoleadores,
        mejoresOfensivas,
        mejoresDefensivas,
        botaDeOro: rankingGoleadores[0] || { jugador: '-', equipo: '-', goles: 0 },
        botaDeOroGrupos: { jugador: botaDeOroGrupos.nombre, equipo: botaDeOroGrupos.equipo, goles: botaDeOroGrupos.goles },
        guantesDeOro: mejoresDefensivas[0] || { jugador: '-', equipo: '-', golesContra: 0, promedio: '0.0' },
        mejorDefensiva: mejoresDefensivas[0] || { jugador: '-', golesContra: 0 },
        mejorDiferencia: rankingGoleadores.reduce((max, jugador) => 
          jugador.diferencia > max.diferencia ? jugador : max, 
          rankingGoleadores[0] || { jugador: '-', diferencia: 0 }
        ),
        masVictorias: Object.values(statsJugadores).reduce((max: any, jugador: any) => 
          jugador.ganados > max.ganados ? jugador : max, 
          { jugador: '-', ganados: 0 }
        ),
        partidoMasGoleador: {
          resultado: `${partidoMasGoleador.golesLocal || 0}-${partidoMasGoleador.golesVisitante || 0}`,
          equipos: `${partidoMasGoleador.jugadorLocal || '-'} vs ${partidoMasGoleador.jugadorVisitante || '-'}`
        },
        statsJugadores: statsJugadores
      };
    }

    private calcularClasificados(): any[] {
      this.calcularTodasLasClasificaciones();
      
      const clasificados: any[] = [];
      
      Object.keys(this.clasificaciones).forEach(nombreGrupo => {
        const clasificacionGrupo = this.clasificaciones[nombreGrupo];
        const grupoConfig = this.torneoActivo.grupos?.find((g: any) => g.nombre === nombreGrupo);
        const numClasificados = grupoConfig?.clasificados || 2;
        
        // Tomar los primeros N clasificados del grupo y agregar información de posición
        const clasificadosGrupo = clasificacionGrupo.slice(0, numClasificados).map((jugador, index) => ({
          ...jugador,
          grupo: nombreGrupo,
          posicion: index + 1,
          esClasificado: true
        }));
        
        clasificados.push(...clasificadosGrupo);
      });
      
      return clasificados;
    }

    private simularJornada(): void {
      const partidosPendientes = this.partidos.filter(p => !p.jugado);
      if (partidosPendientes.length === 0) {
        this.mostrarNotificacion('No hay partidos pendientes para simular', 'warning');
        return;
      }

      // Simular hasta 5 partidos aleatorios
      const partidosASimular = partidosPendientes.slice(0, 5);
      
      partidosASimular.forEach(partido => {
        partido.golesLocal = Math.floor(Math.random() * 4);
        partido.golesVisitante = Math.floor(Math.random() * 4);
        partido.jugado = true;
        partido.fecha = new Date().toISOString();
        
        this.actualizarEstadisticasPartido(partido);
      });

      this.guardarTorneo();
      this.actualizarTodaLaVista();
      
      this.mostrarNotificacion(`Se simularon ${partidosASimular.length} partidos`, 'success');
    }

    private mostrarFixtureCompleto(): void {
      this.mostrarModalConfirmacion(
        '📅 Fixture Completo',
        '¿Deseas ver el fixture completo del torneo en una nueva ventana?',
        () => this.abrirFixtureCompleto()
      );
    }

    private abrirFixtureCompleto(): void {
      const ventana = window.open('', '_blank', 'width=1200,height=800');
      if (!ventana) {
        this.mostrarNotificacion('Error abriendo ventana. Verifica que no estén bloqueadas las ventanas emergentes.', 'error');
        return;
      }

      const html = this.generarHTMLFixtureCompleto();
      ventana.document.write(html);
      ventana.document.close();
    }

    private generarHTMLFixtureCompleto(): string {
      const grupos = [...new Set(this.partidos.map(p => p.grupo))];
      
      let fixtureHTML = '';
      grupos.forEach(grupo => {
        const partidosGrupo = this.partidos.filter(p => p.grupo === grupo);
        const jornadas = [...new Set(partidosGrupo.map(p => p.jornada))].sort((a, b) => a - b);
        
        fixtureHTML += `
          <div class="grupo-fixture">
            <h3>${grupo}</h3>
            ${jornadas.map(jornada => {
              const partidosJornada = partidosGrupo.filter(p => p.jornada === jornada);
              return `
                <div class="jornada">
                  <h4>Jornada ${jornada}</h4>
                  ${partidosJornada.map(partido => `
                    <div class="partido ${partido.jugado ? 'jugado' : 'pendiente'}">
                      <div class="equipos">
                        <div class="equipo local">
                          <img src="/img/equipos/${partido.equipoLocal}.png" alt="${partido.equipoLocal}">
                          <span>${partido.jugadorLocal}</span>
                        </div>
                        <div class="resultado">
                          ${partido.jugado ? `${partido.golesLocal} - ${partido.golesVisitante}` : 'vs'}
                        </div>
                        <div class="equipo visitante">
                          <span>${partido.jugadorVisitante}</span>
                          <img src="/img/equipos/${partido.equipoVisitante}.png" alt="${partido.equipoVisitante}">
                        </div>
                      </div>
                    </div>
                  `).join('')}
                </div>
              `;
            }).join('')}
          </div>
        `;
      });

      return `
        <!DOCTYPE html>
        <html>
        <head>
          <title>Fixture Completo - FIFA Tournament</title>
          <style>
            body { font-family: Arial, sans-serif; background: #1f2937; color: white; margin: 20px; }
            h1 { text-align: center; color: #60a5fa; }
            .grupo-fixture { margin: 30px 0; background: #374151; padding: 20px; border-radius: 10px; }
            .grupo-fixture h3 { color: #fbbf24; border-bottom: 2px solid #fbbf24; padding-bottom: 10px; }
            .jornada { margin: 20px 0; }
            .jornada h4 { color: #a78bfa; margin-bottom: 15px; }
            .partido { margin: 10px 0; padding: 15px; border-radius: 8px; }
            .partido.jugado { background: #065f46; }
            .partido.pendiente { background: #7c2d12; }
            .equipos { display: flex; align-items: center; justify-content: space-between; }
            .equipo { display: flex; align-items: center; gap: 10px; min-width: 200px; }
            .equipo.visitante { flex-direction: row-reverse; justify-content: flex-start; }
            .equipo img { width: 24px; height: 24px; object-fit: contain; }
            .resultado { font-weight: bold; font-size: 18px; padding: 0 20px; }
            @media print { body { color: black; background: white; } }
          </style>
        </head>
        <body>
          <h1>🏆 Fixture Completo - FIFA Tournament</h1>
          ${fixtureHTML}
          <div style="text-align: center; margin-top: 40px;">
            <button onclick="window.print()" style="padding: 10px 20px; background: #3b82f6; color: white; border: none; border-radius: 5px; cursor: pointer;">
              🖨️ Imprimir Fixture
            </button>
          </div>
        </body>
        </html>
      `;
    }

    private avanzarAEliminatorias(): void {
      const partidosRestantes = this.partidos.filter(p => !p.jugado).length;
      
      if (partidosRestantes > 0) {
        this.mostrarNotificacion(`No se puede avanzar. Faltan ${partidosRestantes} partidos por jugar`, 'warning');
        return;
      }

      this.mostrarModalConfirmacion(
        '🏆 Avanzar a Eliminatorias',
        '¿Estás seguro de que quieres avanzar a la fase de eliminatorias? Esta acción no se puede deshacer.',
        () => {
          this.torneoActivo.fase = 'eliminatorias';
          this.generarPartidosEliminatorias();
          this.guardarTorneo();
          this.actualizarTodaLaVista();
          this.mostrarNotificacion('¡Fase de eliminatorias iniciada!', 'success');
        }
      );
    }

    private generarPartidosEliminatorias(): void {
      const clasificados = this.calcularClasificados();
      const esIdaVuelta = this.torneoActivo.configuracion?.formatoEliminatorias === 'ida-vuelta';
      
      // TODO: Implementar generación de partidos de eliminatorias
      console.log('Generando eliminatorias:', { clasificados, esIdaVuelta });
    }

    private simularEliminatoria(): void {
      // TODO: Simular eliminatoria
      this.mostrarNotificacion('Función en desarrollo', 'warning');
    }

    private mostrarComparacionTorneo(jugador1: any, jugador2: any): void {
      const container = document.getElementById('torneo-comparacion-resultado');
      if (!container) return;

      container.innerHTML = `
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- Jugador 1 -->
          <div class="bg-blue-600/20 border border-blue-500/50 rounded-lg p-4">
            <h5 class="text-blue-400 font-bold text-center mb-3">${jugador1.nombre}</h5>
            <div class="space-y-2 text-sm">
              <div class="flex justify-between">
                <span class="text-gray-400">Equipo:</span>
                <span class="text-white">${jugador1.equipo}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Goles:</span>
                <span class="text-green-400 font-bold">${jugador1.goles}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Partidos:</span>
                <span class="text-white">${jugador1.partidos}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Victorias:</span>
                <span class="text-green-400">${jugador1.ganados}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Empates:</span>
                <span class="text-yellow-400">${jugador1.empatados}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Derrotas:</span>
                <span class="text-red-400">${jugador1.perdidos}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Goles Recibidos:</span>
                <span class="text-red-400">${jugador1.golesContra}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Diferencia:</span>
                <span class="text-${jugador1.goles - jugador1.golesContra >= 0 ? 'green' : 'red'}-400 font-bold">
                  ${jugador1.goles - jugador1.golesContra >= 0 ? '+' : ''}${jugador1.goles - jugador1.golesContra}
                </span>
              </div>
            </div>
          </div>

          <!-- Jugador 2 -->
          <div class="bg-red-600/20 border border-red-500/50 rounded-lg p-4">
            <h5 class="text-red-400 font-bold text-center mb-3">${jugador2.nombre}</h5>
            <div class="space-y-2 text-sm">
              <div class="flex justify-between">
                <span class="text-gray-400">Equipo:</span>
                <span class="text-white">${jugador2.equipo}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Goles:</span>
                <span class="text-green-400 font-bold">${jugador2.goles}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Partidos:</span>
                <span class="text-white">${jugador2.partidos}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Victorias:</span>
                <span class="text-green-400">${jugador2.ganados}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Empates:</span>
                <span class="text-yellow-400">${jugador2.empatados}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Derrotas:</span>
                <span class="text-red-400">${jugador2.perdidos}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Goles Recibidos:</span>
                <span class="text-red-400">${jugador2.golesContra}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Diferencia:</span>
                <span class="text-${jugador2.goles - jugador2.golesContra >= 0 ? 'green' : 'red'}-400 font-bold">
                  ${jugador2.goles - jugador2.golesContra >= 0 ? '+' : ''}${jugador2.goles - jugador2.golesContra}
                </span>
              </div>
            </div>
          </div>
        </div>

        <!-- Comparación Directa -->
        <div class="mt-4 bg-gray-700/50 rounded-lg p-4">
          <h6 class="text-white font-bold text-center mb-3">🏆 Ventaja Comparativa</h6>
          <div class="grid grid-cols-3 gap-4 text-center text-sm">
            <div>
              <div class="text-${jugador1.goles > jugador2.goles ? 'green' : jugador1.goles < jugador2.goles ? 'red' : 'yellow'}-400 font-bold">
                ${jugador1.goles > jugador2.goles ? '👑' : jugador1.goles < jugador2.goles ? '👎' : '🤝'}
              </div>
              <div class="text-gray-400">Goles</div>
            </div>
            <div>
              <div class="text-${jugador1.ganados > jugador2.ganados ? 'green' : jugador1.ganados < jugador2.ganados ? 'red' : 'yellow'}-400 font-bold">
                ${jugador1.ganados > jugador2.ganados ? '👑' : jugador1.ganados < jugador2.ganados ? '👎' : '🤝'}
              </div>
              <div class="text-gray-400">Victorias</div>
            </div>
            <div>
              <div class="text-${jugador1.golesContra < jugador2.golesContra ? 'green' : jugador1.golesContra > jugador2.golesContra ? 'red' : 'yellow'}-400 font-bold">
                ${jugador1.golesContra < jugador2.golesContra ? '👑' : jugador1.golesContra > jugador2.golesContra ? '👎' : '🤝'}
              </div>
              <div class="text-gray-400">Defensiva</div>
            </div>
          </div>
        </div>
      `;
    }

    private guardarTorneo(): void {
      if (this.torneoActivo) {
        this.torneoActivo.partidos = this.partidos;
        this.torneoActivo.resultadosEliminatorias = this.resultadosEliminatorias;
        this.torneoActivo.timestamp = Date.now(); // Agregar timestamp
        localStorage.setItem('torneoActivo', JSON.stringify(this.torneoActivo));
      }
    }

    private actualizarTodaLaVista(): void {
      this.actualizarEstadoGeneral();
      this.actualizarPartidosGrupos();
      this.actualizarClasificaciones();
      this.actualizarEliminatorias();
      this.actualizarEstadisticas();
    }

    private recargarConfiguracion(): void {
      this.mostrarModalConfirmacion(
        'Recargar Configuración',
        '¿Estás seguro de que quieres recargar la configuración de grupos? Se perderán los resultados de partidos no guardados.',
        () => {
          // Limpiar torneo activo para forzar recarga
          localStorage.removeItem('torneoActivo');
          console.log('Torneo activo eliminado, reinicializando...');
          // Reinicializar directamente sin recargar página
          this.inicializarTorneoDesdeGrupos();
          this.actualizarTodaLaVista();
        }
      );
    }

    private iniciarVerificacionAutomatica(): void {
      // Guardar timestamp inicial
      const configGrupos = localStorage.getItem('gruposConfig');
      if (configGrupos) {
        try {
          const config = JSON.parse(configGrupos);
          this.configTimestamp = config.timestamp || 0;
        } catch (error) {
          console.error('Error leyendo timestamp inicial:', error);
        }
      }

      // Verificar cada 2 segundos si hay cambios
      this.checkInterval = window.setInterval(() => {
        this.verificarCambiosConfiguracion();
      }, 2000);
    }

    private verificarCambiosConfiguracion(): void {
      const configGrupos = localStorage.getItem('gruposConfig');
      if (configGrupos) {
        try {
          const config = JSON.parse(configGrupos);
          const nuevoTimestamp = config.timestamp || 0;
          
          if (nuevoTimestamp > this.configTimestamp) {
            console.log('¡Cambio detectado automáticamente! Recargando torneo...');
            this.configTimestamp = nuevoTimestamp;
            
            // Mostrar notificación
            this.mostrarNotificacion('Configuración actualizada detectada', 'success');
            
            // Recargar torneo automáticamente
            localStorage.removeItem('torneoActivo');
            this.inicializarTorneoDesdeGrupos();
            this.actualizarTodaLaVista();
          }
        } catch (error) {
          console.error('Error verificando cambios:', error);
        }
      }
    }

    public detenerVerificacionAutomatica(): void {
      if (this.checkInterval) {
        clearInterval(this.checkInterval);
        this.checkInterval = null;
      }
    }

    private mostrarMensajeError(mensaje: string): void {
      const container = document.querySelector('.space-y-8');
      if (container) {
        container.innerHTML = `
          <div class="text-center py-16">
            <div class="text-6xl mb-6">⚠️</div>
            <h2 class="text-2xl font-bold text-white mb-4">Error en el Torneo</h2>
            <p class="text-gray-400 mb-6">${mensaje}</p>
            <a href="/grupos" class="btn btn-primary">
              🏆 Configurar Grupos
            </a>
          </div>
        `;
      }
    }

    // Modal de confirmación
    private accionConfirmacion: (() => void) | null = null;

    private mostrarModalConfirmacion(titulo: string, mensaje: string, accion: () => void): void {
      document.getElementById('modal-titulo')!.textContent = titulo;
      document.getElementById('modal-mensaje')!.textContent = mensaje;
      this.accionConfirmacion = accion;
      const modal = document.getElementById('modal-confirmacion');
      modal?.classList.remove('hidden');
    }

    private cerrarModalConfirmacion(): void {
      const modal = document.getElementById('modal-confirmacion');
      modal?.classList.add('hidden');
      this.accionConfirmacion = null;
    }

    private ejecutarAccionConfirmacion(): void {
      if (this.accionConfirmacion) {
        this.accionConfirmacion();
      }
      this.cerrarModalConfirmacion();
    }

    private mostrarNotificacion(mensaje: string, tipo: 'success' | 'error' | 'warning'): void {
      const colores = {
        success: 'bg-green-500',
        error: 'bg-red-500',
        warning: 'bg-orange-500'
      };

      const notificacion = document.createElement('div');
      notificacion.className = `fixed top-4 right-4 ${colores[tipo]} text-white px-6 py-3 rounded-lg shadow-lg z-50 transform transition-all duration-300`;
      notificacion.textContent = mensaje;

      document.body.appendChild(notificacion);

      setTimeout(() => {
        notificacion.style.transform = 'translateX(400px)';
        setTimeout(() => {
          document.body.removeChild(notificacion);
        }, 300);
      }, 3000);
    }

    // Funciones auxiliares para eliminatorias
    private esRondaIdaVuelta(rondaId: string): boolean {
      // Determinación automática de si una ronda es ida y vuelta basado en el tipo
      
      // Rondas de ida y vuelta:
      // - Rondas previas/clasificatorias (mejores segundos)
      // - Semifinales
      if (rondaId.includes('ronda-previa') || 
          rondaId.includes('clasificatoria') || 
          rondaId.includes('semifinal')) {
        return true;
      }
      
      // Partido único (eliminación directa):
      // - Final
      // - Tercer lugar (partido de consolación)
      // - Cuartos de final (si los hay)
      if (rondaId.includes('final') || 
          rondaId.includes('tercer-lugar') || 
          rondaId.includes('consolacion') ||
          rondaId.includes('cuartos')) {
        return false;
      }
      
      // Por defecto, si no podemos determinar el tipo, asumimos que es partido único
      // para evitar confusiones en el modal
      return false;
    }

    private obtenerDatosRondaEliminatoria(rondaId: string): any {
      // Esta función debe obtener los datos reales de los equipos/jugadores
      // Por ahora usaremos datos simulados, pero deberías conectarlo con tu sistema real
      
      const clasificaciones = this.clasificaciones;
      const jugadores = this.jugadores;
      
      switch (rondaId) {
        case 'ronda-previa-1':
          // 2°B vs 2°C
          const segundoB = this.obtenerSegundoLugar('Grupo B');
          const segundoC = this.obtenerSegundoLugar('Grupo C');
          return {
            jugadorLocal: segundoB?.nombre || 'Segundo B',
            equipoLocal: segundoB?.equipo || 'liverpool',
            jugadorVisitante: segundoC?.nombre || 'Segundo C',
            equipoVisitante: segundoC?.equipo || 'milan'
          };
          
        case 'ronda-previa-2':
          // Ganador P1 vs 2°A
          const segundoA = this.obtenerSegundoLugar('Grupo A');
          const resultadoP1 = this.resultadosEliminatorias['ronda-previa-1'];
          
          if (resultadoP1) {
            // Si ya se jugó el Partido 1, usar el ganador real
            const datosP1 = this.obtenerDatosRondaEliminatoria('ronda-previa-1');
            const ganadorNombre = resultadoP1.ganadorLocal ? datosP1.jugadorLocal : datosP1.jugadorVisitante;
            const ganadorEquipo = resultadoP1.ganadorLocal ? datosP1.equipoLocal : datosP1.equipoVisitante;
            
            return {
              jugadorLocal: ganadorNombre,
              equipoLocal: ganadorEquipo,
              jugadorVisitante: segundoA?.nombre || 'Segundo A',
              equipoVisitante: segundoA?.equipo || 'psg'
            };
          } else {
            // Si aún no se jugó el Partido 1, mostrar texto genérico
            return {
              jugadorLocal: 'Ganador P1',
              equipoLocal: 'liverpool', // Temporal
              jugadorVisitante: segundoA?.nombre || 'Segundo A',
              equipoVisitante: segundoA?.equipo || 'psg'
            };
          }
          
        case 'semifinal-1':
          // 1°A vs Mejor 2° Lugar
          const primeroA = this.obtenerPrimeroLugar('Grupo A');
          return {
            jugadorLocal: primeroA?.nombre || 'Primero A',
            equipoLocal: primeroA?.equipo || 'real-madrid',
            jugadorVisitante: 'Mejor 2° Lugar',
            equipoVisitante: 'liverpool' // Temporal
          };
          
        case 'semifinal-2':
          // 1°B vs 1°C
          const primeroB = this.obtenerPrimeroLugar('Grupo B');
          const primeroC = this.obtenerPrimeroLugar('Grupo C');
          return {
            jugadorLocal: primeroB?.nombre || 'Primero B',
            equipoLocal: primeroB?.equipo || 'francia',
            jugadorVisitante: primeroC?.nombre || 'Primero C',
            equipoVisitante: primeroC?.equipo || 'barcelona'
          };
          
        case 'tercer-lugar':
          return {
            jugadorLocal: 'Perdedor SF1',
            equipoLocal: 'real-madrid',
            jugadorVisitante: 'Perdedor SF2',
            equipoVisitante: 'francia'
          };
          
        case 'final':
          return {
            jugadorLocal: 'Ganador SF1',
            equipoLocal: 'real-madrid',
            jugadorVisitante: 'Ganador SF2',
            equipoVisitante: 'barcelona'
          };
          
        default:
          return {
            jugadorLocal: 'Equipo Local',
            equipoLocal: 'real-madrid',
            jugadorVisitante: 'Equipo Visitante',
            equipoVisitante: 'barcelona'
          };
      }
    }

    private obtenerPrimeroLugar(grupo: string): any {
      const clasificacion = this.clasificaciones[grupo];
      if (clasificacion && clasificacion.length > 0) {
        return {
          nombre: clasificacion[0].nombre,
          equipo: clasificacion[0].equipo
        };
      }
      return null;
    }

    private obtenerSegundoLugar(grupo: string): any {
      const clasificacion = this.clasificaciones[grupo];
      if (clasificacion && clasificacion.length > 1) {
        return {
          nombre: clasificacion[1].nombre,
          equipo: clasificacion[1].equipo
        };
      }
      return null;
    }

    // Función para registrar resultados de eliminatorias
    registrarResultadoEliminatoria(rondaId: string): void {
      // Determinar si es ida y vuelta basado en la ronda específica
      const esIdaVuelta = this.esRondaIdaVuelta(rondaId);
      const datosRonda = this.obtenerDatosRondaEliminatoria(rondaId);
      
      if (!datosRonda) {
        this.mostrarNotificacion('No se pudieron obtener los datos de la ronda', 'error');
        return;
      }
      
      // Crear modal personalizado para registro de resultado
      const modal = document.createElement('div');
      modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 modal-entrada';
      
      const content = document.createElement('div');
      content.className = 'bg-gray-800 rounded-2xl w-full max-w-3xl mx-4 border-2 border-gray-700 shadow-2xl max-h-[90vh] overflow-y-auto';
      
      const tipoPartido = esIdaVuelta ? '🔄 Ida y Vuelta' : '⚡ Partido Único';
      
      content.innerHTML = `
        <!-- Header -->
        <div class="flex justify-between items-center p-6 border-b border-gray-700 bg-gradient-to-r from-gray-800 to-gray-900">
          <h3 class="text-2xl font-bold text-white flex items-center">
            <span class="text-3xl mr-3">⚽</span>
            <span class="bg-gradient-to-r from-blue-400 to-green-400 bg-clip-text text-transparent">Registrar Eliminatoria</span>
          </h3>
          <button id="btn-cerrar-modal-elim" class="text-gray-400 hover:text-white transition-colors p-2 rounded-lg hover:bg-gray-700">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <!-- Body -->
        <div class="p-6 space-y-6">
          <!-- Información del partido -->
          <div class="text-center">
            <span class="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-6 py-3 rounded-full text-lg font-bold shadow-lg">
              ${this.obtenerDescripcionRonda(rondaId)}
            </span>
            <div class="mt-3 text-sm ${esIdaVuelta ? 'text-blue-400' : 'text-orange-400'}">${tipoPartido}</div>
          </div>

          ${esIdaVuelta ? `
          <!-- Selector de partido (Solo visible en ida y vuelta) -->
          <div id="selector-partido-elim">
            <div class="bg-gradient-to-r from-gray-700/40 to-gray-800/40 rounded-2xl p-6 border-2 border-gray-600 shadow-2xl">
              <h4 class="text-xl font-bold text-white mb-4 flex items-center justify-center">
                🔄 <span class="ml-2">Seleccionar Partido del Cruce</span>
              </h4>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <button id="btn-partido-ida-elim" class="partido-selector-btn group bg-gradient-to-br from-blue-600/20 to-blue-700/30 hover:from-blue-600/40 hover:to-blue-700/50 border-3 border-blue-500/50 hover:border-blue-400 rounded-xl p-6 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-blue-500/30">
                  <div class="text-blue-300 font-bold text-xl mb-2 flex items-center justify-center">
                    🏠 <span class="ml-2">PARTIDO DE IDA</span>
                  </div>
                  <div class="text-sm text-gray-300 mb-3">${datosRonda.jugadorLocal} vs ${datosRonda.jugadorVisitante}</div>
                  <div id="estado-ida-elim" class="text-xs bg-blue-500/20 text-blue-300 px-3 py-1 rounded-full font-medium">Pendiente</div>
                </button>
                <button id="btn-partido-vuelta-elim" class="partido-selector-btn group bg-gradient-to-br from-green-600/20 to-green-700/30 hover:from-green-600/40 hover:to-green-700/50 border-3 border-green-500/50 hover:border-green-400 rounded-xl p-6 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-green-500/30">
                  <div class="text-green-300 font-bold text-xl mb-2 flex items-center justify-center">
                    ✈️ <span class="ml-2">PARTIDO DE VUELTA</span>
                  </div>
                  <div class="text-sm text-gray-300 mb-3">${datosRonda.jugadorVisitante} vs ${datosRonda.jugadorLocal}</div>
                  <div id="estado-vuelta-elim" class="text-xs bg-green-500/20 text-green-300 px-3 py-1 rounded-full font-medium">Pendiente</div>
                </button>
              </div>
            </div>
          </div>
          ` : ''}

          <!-- Información del partido actual (en ida y vuelta) -->
          ${esIdaVuelta ? `
          <div id="info-partido-actual-elim" class="bg-gradient-to-r from-purple-600/20 to-blue-600/20 rounded-xl p-4 border border-purple-500/30">
            <div class="flex items-center justify-center space-x-4 text-center">
              <div id="partido-actual-tipo-elim" class="text-purple-400 font-bold"></div>
              <div class="w-2 h-2 bg-purple-400 rounded-full"></div>
              <div id="partido-actual-descripcion-elim" class="text-gray-300"></div>
            </div>
          </div>
          ` : ''}

          <!-- Contenedor principal del partido -->
          <div class="bg-gradient-to-b from-gray-700/50 to-gray-800/50 rounded-2xl p-8 border-2 border-gray-600 shadow-xl">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 items-center">
              <!-- Jugador Local -->
              <div class="text-center">
                <div class="bg-gradient-to-b from-gray-700 to-gray-800 rounded-2xl p-6 mb-4 border-3 border-gray-600 hover:border-blue-500 transition-all duration-300 shadow-xl hover:shadow-blue-500/20 transform hover:-translate-y-1">
                  <div class="relative">
                    <img id="img-local-elim" src="/img/equipos/${datosRonda.equipoLocal}.png" alt="${datosRonda.equipoLocal}" class="w-24 h-24 mx-auto mb-4 object-contain rounded-xl shadow-lg border-2 border-gray-600">
                    <div class="absolute -top-2 -right-2 w-8 h-8 bg-gradient-to-r from-blue-500 to-blue-600 rounded-full flex items-center justify-center text-white text-sm font-bold shadow-lg">🏠</div>
                  </div>
                  <p id="nombre-local-elim" class="text-white font-bold text-xl mb-1">${datosRonda.jugadorLocal}</p>
                  <p id="equipo-local-elim" class="text-blue-400 text-sm uppercase tracking-wide font-medium">${datosRonda.equipoLocal}</p>
                </div>
                <div class="space-y-2">
                  <input type="number" id="goles-local-elim" class="w-24 h-20 text-center text-3xl font-bold rounded-xl bg-gradient-to-b from-gray-800 to-gray-900 border-3 border-gray-600 text-white focus:border-blue-500 focus:ring-4 focus:ring-blue-500/30 transition-all duration-200 shadow-lg hover:shadow-blue-500/20" 
                         min="0" max="20" value="0" placeholder="0">
                  <p class="text-gray-400 text-sm font-medium">⚽ Goles</p>
                </div>
              </div>

              <!-- VS y marcador central -->
              <div class="text-center">
                <div class="flex flex-col items-center space-y-4">
                  <div class="text-gray-300 text-4xl font-bold tracking-wider animate-pulse">⚔️</div>
                  <div class="text-2xl font-bold text-gradient bg-gradient-to-r from-red-400 to-yellow-400 bg-clip-text text-transparent">ELIMINATORIA</div>
                  <div class="bg-gradient-to-b from-gray-800 to-gray-900 rounded-2xl p-6 border-3 border-gray-600 shadow-2xl hover:border-yellow-500 transition-all duration-300">
                    <div class="text-4xl font-mono font-bold text-white tracking-wider">
                      <span id="marcador-preview-elim" class="drop-shadow-lg">0 - 0</span>
                    </div>
                    <div class="text-sm text-yellow-400 mt-2 font-medium">🏆 MARCADOR</div>
                    <div id="resultado-estado-elim" class="text-xs text-gray-400 mt-2">Empate</div>
                  </div>
                </div>
              </div>

              <!-- Jugador Visitante -->
              <div class="text-center">
                <div class="bg-gradient-to-b from-gray-700 to-gray-800 rounded-2xl p-6 mb-4 border-3 border-gray-600 hover:border-green-500 transition-all duration-300 shadow-xl hover:shadow-green-500/20 transform hover:-translate-y-1">
                  <div class="relative">
                    <img id="img-visitante-elim" src="/img/equipos/${datosRonda.equipoVisitante}.png" alt="${datosRonda.equipoVisitante}" class="w-24 h-24 mx-auto mb-4 object-contain rounded-xl shadow-lg border-2 border-gray-600">
                    <div class="absolute -top-2 -right-2 w-8 h-8 bg-gradient-to-r from-green-500 to-green-600 rounded-full flex items-center justify-center text-white text-sm font-bold shadow-lg">✈️</div>
                  </div>
                  <p id="nombre-visitante-elim" class="text-white font-bold text-xl mb-1">${datosRonda.jugadorVisitante}</p>
                  <p id="equipo-visitante-elim" class="text-green-400 text-sm uppercase tracking-wide font-medium">${datosRonda.equipoVisitante}</p>
                </div>
                <div class="space-y-2">
                  <input type="number" id="goles-visitante-elim" class="w-24 h-20 text-center text-3xl font-bold rounded-xl bg-gradient-to-b from-gray-800 to-gray-900 border-3 border-gray-600 text-white focus:border-green-500 focus:ring-4 focus:ring-green-500/30 transition-all duration-200 shadow-lg hover:shadow-green-500/20" 
                         min="0" max="20" value="0" placeholder="0">
                  <p class="text-gray-400 text-sm font-medium">⚽ Goles</p>
                </div>
              </div>
            </div>

            ${esIdaVuelta ? `
            <!-- Resumen global (Solo en ida y vuelta) -->
            <div id="resumen-global-elim" class="mt-6 bg-gradient-to-r from-yellow-600/30 to-orange-600/30 rounded-2xl p-6 border-2 border-yellow-500/40 shadow-2xl">
              <h4 class="text-xl font-bold text-yellow-300 mb-6 flex items-center justify-center">
                📊 <span class="ml-2">Resumen Global del Cruce</span>
              </h4>
              <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div class="text-center bg-blue-600/20 rounded-xl p-4 border border-blue-500/30">
                  <div class="text-3xl font-bold text-blue-300" id="goles-totales-local-elim">0</div>
                  <div class="text-sm text-gray-300 font-medium" id="nombre-total-local-elim">${datosRonda.jugadorLocal}</div>
                  <div class="text-xs text-blue-400 font-bold">⚽ GOLES TOTALES</div>
                </div>
                <div class="text-center bg-yellow-600/20 rounded-xl p-4 border border-yellow-500/30">
                  <div class="text-lg text-yellow-300 font-bold mb-2">🏆 RESULTADO GLOBAL</div>
                  <div class="text-2xl font-mono font-bold text-white" id="resultado-global-elim">0 - 0</div>
                  <div class="text-sm font-semibold mt-2" id="estado-ganador-elim">Empate</div>
                </div>
                <div class="text-center bg-green-600/20 rounded-xl p-4 border border-green-500/30">
                  <div class="text-3xl font-bold text-green-300" id="goles-totales-visitante-elim">0</div>
                  <div class="text-sm text-gray-300 font-medium" id="nombre-total-visitante-elim">${datosRonda.jugadorVisitante}</div>
                  <div class="text-xs text-green-400 font-bold">⚽ GOLES TOTALES</div>
                </div>
              </div>
            </div>

            <!-- Estado del partido registrado (Solo en ida y vuelta) -->
            <div id="partido-completado-elim" class="hidden mt-6 bg-gradient-to-r from-green-600/30 to-emerald-600/30 rounded-2xl p-6 border-2 border-green-500/40 shadow-2xl">
              <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                  <div class="w-12 h-12 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center shadow-lg">
                    <span class="text-white font-bold text-xl">✓</span>
                  </div>
                  <div>
                    <div class="text-green-300 font-bold text-lg">✅ Partido Registrado</div>
                    <div class="text-lg text-white font-semibold" id="resultado-registrado-elim"></div>
                  </div>
                </div>
                <button type="button" id="btn-editar-partido-elim" class="bg-gradient-to-r from-orange-600 to-orange-700 hover:from-orange-700 hover:to-orange-800 text-white font-semibold py-2 px-4 rounded-lg transition-all duration-200 flex items-center space-x-2 hover:scale-105 shadow-lg">
                  <span>✏️</span>
                  <span>Editar</span>
                </button>
              </div>
            </div>
            ` : `
            <!-- Resultado y ganador (Solo en partido único) -->
            <div id="info-ganador-elim" class="mt-6 bg-gradient-to-r from-yellow-600/20 to-orange-600/20 rounded-xl p-4 border border-yellow-500/30 text-center hidden">
              <div class="text-yellow-400 font-bold text-lg mb-2">🏆 GANADOR</div>
              <div id="nombre-ganador-elim" class="text-white text-xl font-bold"></div>
              <div class="text-sm text-gray-300 mt-1">Avanza a la siguiente ronda</div>
            </div>
            `}

            ${esIdaVuelta ? `
            <!-- Información de ida y vuelta -->
            <div class="mt-6 bg-gradient-to-r from-blue-600/20 to-purple-600/20 rounded-xl p-4 border border-blue-500/30">
              <div class="text-blue-400 font-bold text-center mb-2">ℹ️ Información Ida y Vuelta</div>
              <div class="text-sm text-gray-300 text-center">
                Registra ambos partidos para determinar el ganador global.
                <br>El ganador se determinará por el resultado global de ambos partidos.
              </div>
            </div>
            ` : `
            <!-- Información de partido único -->
            <div class="mt-6 bg-gradient-to-r from-orange-600/20 to-red-600/20 rounded-xl p-4 border border-orange-500/30">
              <div class="text-orange-400 font-bold text-center mb-2">⚡ Partido Único</div>
              <div class="text-sm text-gray-300 text-center">
                Este partido define directamente al ganador que avanza a la siguiente ronda.
                ${(rondaId.includes('final') || rondaId.includes('tercer-lugar') || rondaId.includes('consolacion')) ? '<br><strong>¡No puede haber empates!</strong>' : ''}
              </div>
            </div>
            `}
          </div>
        </div>

        <!-- Footer -->
        <div class="flex space-x-3 p-6 border-t border-gray-700 bg-gray-800/50">
          <button type="button" id="btn-cancelar-resultado-elim" class="btn flex-1 bg-gray-600 hover:bg-gray-700 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 flex items-center justify-center space-x-2 hover:scale-105">
            <span>❌</span>
            <span>Cancelar</span>
          </button>
          <button type="button" id="btn-confirmar-resultado-elim" class="btn flex-1 bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 flex items-center justify-center space-x-2 hover:scale-105 shadow-lg">
            <span>✅</span>
            <span>Confirmar Resultado</span>
          </button>
        </div>
      `;
      
      modal.appendChild(content);
      document.body.appendChild(modal);
      
      // Variables para ida y vuelta
      let partidoIdaData = { golesLocal: 0, golesVisitante: 0, jugado: false };
      let partidoVueltaData = { golesLocal: 0, golesVisitante: 0, jugado: false };
      let partidoActual = 'ida';

      // Event listeners
      const golesLocal = content.querySelector('#goles-local-elim') as HTMLInputElement;
      const golesVisitante = content.querySelector('#goles-visitante-elim') as HTMLInputElement;
      const marcadorPreview = content.querySelector('#marcador-preview-elim') as HTMLElement;
      const resultadoEstado = content.querySelector('#resultado-estado-elim') as HTMLElement;
      
      // Funciones para ida y vuelta
      const configurarPartidoActual = (tipo: 'ida' | 'vuelta') => {
        partidoActual = tipo;
        const data = tipo === 'ida' ? partidoIdaData : partidoVueltaData;
        
        if (tipo === 'ida') {
          // En ida: Local original como local, Visitante original como visitante
          golesLocal.value = data.golesLocal.toString();
          golesVisitante.value = data.golesVisitante.toString();
        } else {
          // En vuelta: Visitante original como local, Local original como visitante
          // Los inputs se intercambian para reflejar el cambio de sede
          golesLocal.value = data.golesVisitante.toString();
          golesVisitante.value = data.golesLocal.toString();
        }
        
        if (esIdaVuelta) {
          const tipoTexto = tipo === 'ida' ? '🏠 PARTIDO DE IDA' : '✈️ PARTIDO DE VUELTA';
          const descripcion = tipo === 'ida' ? 
            `${datosRonda.jugadorLocal} (local) vs ${datosRonda.jugadorVisitante} (visitante)` :
            `${datosRonda.jugadorVisitante} (local) vs ${datosRonda.jugadorLocal} (visitante)`;
          
          content.querySelector('#partido-actual-tipo-elim')!.textContent = tipoTexto;
          content.querySelector('#partido-actual-descripcion-elim')!.textContent = descripcion;
          
          // Actualizar botones
          const btnIda = content.querySelector('#btn-partido-ida-elim');
          const btnVuelta = content.querySelector('#btn-partido-vuelta-elim');
          
          btnIda?.classList.toggle('border-blue-500', tipo === 'ida');
          btnIda?.classList.toggle('bg-blue-600/40', tipo === 'ida');
          btnIda?.classList.toggle('border-blue-500/50', tipo !== 'ida');
          btnIda?.classList.toggle('bg-blue-600/20', tipo !== 'ida');
          
          btnVuelta?.classList.toggle('border-green-500', tipo === 'vuelta');
          btnVuelta?.classList.toggle('bg-green-600/40', tipo === 'vuelta');
          btnVuelta?.classList.toggle('border-green-500/50', tipo !== 'vuelta');
          btnVuelta?.classList.toggle('bg-green-600/20', tipo !== 'vuelta');
          
          // Mostrar si está completado
          if (data.jugado) {
            content.querySelector('#partido-completado-elim')?.classList.remove('hidden');
            content.querySelector('#resultado-registrado-elim')!.textContent = 
              `${data.golesLocal} - ${data.golesVisitante}`;
          } else {
            content.querySelector('#partido-completado-elim')?.classList.add('hidden');
          }
          
          actualizarResumenGlobal();
        }
        
        actualizarPreview();
      };

      const actualizarResumenGlobal = () => {
        if (!esIdaVuelta) return;
        
        // En ida y vuelta:
        // - Ida: Local vs Visitante
        // - Vuelta: Visitante vs Local (se invierten los roles)
        // Por eso los goles del equipo "local original" son:
        // - Sus goles como local en la ida + sus goles como visitante en la vuelta
        const golesLocalTotal = partidoIdaData.golesLocal + partidoVueltaData.golesVisitante;
        const golesVisitanteTotal = partidoIdaData.golesVisitante + partidoVueltaData.golesLocal;
        
        content.querySelector('#goles-totales-local-elim')!.textContent = golesLocalTotal.toString();
        content.querySelector('#goles-totales-visitante-elim')!.textContent = golesVisitanteTotal.toString();
        content.querySelector('#resultado-global-elim')!.textContent = `${golesLocalTotal} - ${golesVisitanteTotal}`;
        
        const estadoGanador = content.querySelector('#estado-ganador-elim');
        if (estadoGanador) {
          if (golesLocalTotal > golesVisitanteTotal) {
            estadoGanador.textContent = `Ganador: ${datosRonda.jugadorLocal}`;
            estadoGanador.className = 'text-sm text-green-400';
          } else if (golesVisitanteTotal > golesLocalTotal) {
            estadoGanador.textContent = `Ganador: ${datosRonda.jugadorVisitante}`;
            estadoGanador.className = 'text-sm text-green-400';
          } else {
            estadoGanador.textContent = 'Empate Global';
            estadoGanador.className = 'text-sm text-yellow-400';
          }
        }
      };
      
      // Actualizar preview en tiempo real
      const actualizarPreview = () => {
        const local = parseInt(golesLocal.value) || 0;
        const visitante = parseInt(golesVisitante.value) || 0;
        
        marcadorPreview.textContent = `${local} - ${visitante}`;
        
        // Añadir efecto de pulso cuando cambia
        marcadorPreview.classList.add('marcador-pulso');
        setTimeout(() => {
          marcadorPreview.classList.remove('marcador-pulso');
        }, 1000);
        
        if (esIdaVuelta) {
          // En ida y vuelta, solo mostramos el resultado del partido actual
          if (local > visitante) {
            resultadoEstado.innerHTML = `🏆 <span class="text-green-400 font-bold">Local Gana</span>`;
          } else if (visitante > local) {
            resultadoEstado.innerHTML = `🏆 <span class="text-green-400 font-bold">Visitante Gana</span>`;
          } else {
            resultadoEstado.innerHTML = `⚖️ <span class="text-yellow-400 font-bold">Empate</span>`;
          }
        } else {
          // En partido único, mostramos ganador definitivo
          const infoGanador = content.querySelector('#info-ganador-elim') as HTMLElement;
          const nombreGanador = content.querySelector('#nombre-ganador-elim') as HTMLElement;
          
          if (local > visitante) {
            resultadoEstado.innerHTML = `🏆 <span class="text-green-400 font-bold">Local Gana</span>`;
            infoGanador.classList.remove('hidden');
            nombreGanador.textContent = datosRonda.jugadorLocal;
          } else if (visitante > local) {
            resultadoEstado.innerHTML = `🏆 <span class="text-green-400 font-bold">Visitante Gana</span>`;
            infoGanador.classList.remove('hidden');
            nombreGanador.textContent = datosRonda.jugadorVisitante;
          } else {
            resultadoEstado.innerHTML = `⚖️ <span class="text-yellow-400 font-bold">Empate</span>`;
            infoGanador.classList.add('hidden');
          }
        }
      };
      
      // Event listeners específicos
      golesLocal.addEventListener('input', () => {
        if (esIdaVuelta) {
          if (partidoActual === 'ida') {
            partidoIdaData.golesLocal = parseInt(golesLocal.value) || 0;
          } else {
            // En la vuelta, el "local" del input corresponde al visitante original
            partidoVueltaData.golesVisitante = parseInt(golesLocal.value) || 0;
          }
          actualizarResumenGlobal();
        }
        actualizarPreview();
      });
      
      golesVisitante.addEventListener('input', () => {
        if (esIdaVuelta) {
          if (partidoActual === 'ida') {
            partidoIdaData.golesVisitante = parseInt(golesVisitante.value) || 0;
          } else {
            // En la vuelta, el "visitante" del input corresponde al local original
            partidoVueltaData.golesLocal = parseInt(golesVisitante.value) || 0;
          }
          actualizarResumenGlobal();
        }
        actualizarPreview();
      });

      // Botones de selección de partido (ida y vuelta)
      if (esIdaVuelta) {
        content.querySelector('#btn-partido-ida-elim')?.addEventListener('click', () => {
          configurarPartidoActual('ida');
        });
        
        content.querySelector('#btn-partido-vuelta-elim')?.addEventListener('click', () => {
          configurarPartidoActual('vuelta');
        });
        
        content.querySelector('#btn-editar-partido-elim')?.addEventListener('click', () => {
          content.querySelector('#partido-completado-elim')?.classList.add('hidden');
        });
      }
      
      // Botón cerrar
      content.querySelector('#btn-cerrar-modal-elim')?.addEventListener('click', () => {
        document.body.removeChild(modal);
      });
      
      // Botón cancelar
      content.querySelector('#btn-cancelar-resultado-elim')?.addEventListener('click', () => {
        document.body.removeChild(modal);
      });
      
      // Botón confirmar
      content.querySelector('#btn-confirmar-resultado-elim')?.addEventListener('click', () => {
        const local = parseInt(golesLocal.value) || 0;
        const visitante = parseInt(golesVisitante.value) || 0;
        
        if (esIdaVuelta) {
          // Guardar el partido actual
          if (partidoActual === 'ida') {
            partidoIdaData.golesLocal = local;
            partidoIdaData.golesVisitante = visitante;
            partidoIdaData.jugado = true;
          } else {
            // En vuelta, intercambiar los valores porque los roles se invierten
            partidoVueltaData.golesVisitante = local;   // El "local" del input es el visitante original
            partidoVueltaData.golesLocal = visitante;   // El "visitante" del input es el local original
            partidoVueltaData.jugado = true;
          }
          
          // Actualizar estado visual
          configurarPartidoActual(partidoActual as 'ida' | 'vuelta');
          
          // Verificar si ambos partidos están completos
          if (partidoIdaData.jugado && partidoVueltaData.jugado) {
            const golesLocalTotal = partidoIdaData.golesLocal + partidoVueltaData.golesVisitante;
            const golesVisitanteTotal = partidoIdaData.golesVisitante + partidoVueltaData.golesLocal;
            
            this.procesarResultadoEliminatoria(rondaId, golesLocalTotal, golesVisitanteTotal);
            document.body.removeChild(modal);
            this.mostrarNotificacion('¡Cruce completado! Ambos partidos registrados', 'success');
          } else {
            this.mostrarNotificacion('Partido registrado. Registra el partido de vuelta', 'success');
            // Auto-seleccionar el partido pendiente
            if (!partidoVueltaData.jugado) {
              configurarPartidoActual('vuelta');
            }
          }
        } else {
          // Para partidos únicos de final y tercer lugar, no permitir empates
          if ((rondaId.includes('final') || rondaId.includes('tercer-lugar') || rondaId.includes('consolacion')) && local === visitante) {
            this.mostrarNotificacion('En la final y tercer lugar no puede haber empates. Debe haber un ganador.', 'error');
            return;
          }
          
          this.procesarResultadoEliminatoria(rondaId, local, visitante);
          document.body.removeChild(modal);
          this.mostrarNotificacion('¡Resultado registrado! Eliminatoria completada.', 'success');
        }
      });
      
      // Inicializar
      if (esIdaVuelta) {
        configurarPartidoActual('ida');
      } else {
        actualizarPreview();
      }
      
      golesLocal.focus();
    }
    
    private obtenerDescripcionRonda(rondaId: string): string {
      switch (rondaId) {
        case 'ronda-previa-1':
          return 'Ronda Previa - Partido 1 (2°B vs 2°C)';
        case 'ronda-previa-2':
          return 'Ronda Previa - Partido 2 (Ganador P1 vs 2°A)';
        case 'semifinal-1':
          return 'Semifinal 1 (1°A vs Mejor 2° Lugar)';
        case 'semifinal-2':
          return 'Semifinal 2 (1°B vs 1°C)';
        case 'tercer-lugar':
          return 'Partido por el Tercer Lugar';
        case 'final':
          return 'Gran Final';
        default:
          return 'Partido de Eliminatoria';
      }
    }
    
    private procesarResultadoEliminatoria(rondaId: string, golesLocal: number, golesVisitante: number): void {
      // Aquí se procesaría el resultado y se actualizaría la estructura de eliminatorias
      console.log(`Resultado ${rondaId}: ${golesLocal} - ${golesVisitante}`);
      
      // Determinar ganador
      const ganadorLocal = golesLocal > golesVisitante;
      
      // Guardar el resultado en la estructura de datos
      this.resultadosEliminatorias[rondaId] = {
        golesLocal,
        golesVisitante,
        ganadorLocal,
        jugado: true,
        timestamp: Date.now()
      };
      
      // Actualizar la vista de eliminatorias basada en el resultado
      this.actualizarEstructuraEliminatorias(rondaId, ganadorLocal, golesLocal, golesVisitante);
      
      // Actualizar ganadores dependientes (como Partido 2 en rondas previas)
      this.actualizarGanadoresDependientes(rondaId);
      
      // Habilitar siguiente ronda si corresponde
      this.habilitarSiguienteRonda(rondaId);
      
      // Si es la final, mostrar al campeón
      if (rondaId === 'final') {
        this.mostrarCampeon(ganadorLocal, golesLocal, golesVisitante);
      }

      // Guardar el torneo con los nuevos resultados
      this.guardarTorneo();
    }
    
    private mostrarCampeon(ganadorLocal: boolean, golesLocal: number, golesVisitante: number): void {
      const championContent = document.getElementById('champion-content');
      if (championContent) {
        // Ocultar el contenido de espera
        const waitingChampion = championContent.querySelector('.waiting-champion');
        const championRevealed = championContent.querySelector('.champion-revealed');
        
        if (waitingChampion && championRevealed) {
          waitingChampion.classList.add('hidden');
          championRevealed.classList.remove('hidden');
          
          // Aquí deberías obtener el nombre real del ganador
          // Por ahora usamos un placeholder
          const championName = ganadorLocal ? 'Ganador Semifinal 1' : 'Ganador Semifinal 2';
          const championTeam = ganadorLocal ? 'Equipo SF1' : 'Equipo SF2';
          
          document.getElementById('champion-name')!.textContent = championName;
          document.getElementById('champion-team')!.textContent = `Equipo: ${championTeam}`;
          
          // Agregar animación de celebración
          const championContainer = document.querySelector('.champion-container');
          if (championContainer) {
            championContainer.classList.add('animate-pulse');
            setTimeout(() => {
              championContainer.classList.remove('animate-pulse');
            }, 3000);
          }
          
          // Mostrar mensaje de resultado final
          const resultadoFinal = document.createElement('div');
          resultadoFinal.className = 'resultado-final mt-4 p-3 bg-yellow-900/50 rounded-lg border border-yellow-400';
          resultadoFinal.innerHTML = `
            <div class="text-center">
              <div class="text-lg font-bold text-yellow-400 mb-2">Resultado Final</div>
              <div class="text-2xl font-black text-white">${golesLocal} - ${golesVisitante}</div>
              <div class="text-sm text-gray-300 mt-1">
                ${ganadorLocal ? 'Victoria del equipo local' : 'Victoria del equipo visitante'}
              </div>
            </div>
          `;
          
          const championRevealed_div = championRevealed as HTMLElement;
          championRevealed_div.appendChild(resultadoFinal);
        }
      }
    }
    
    private actualizarEstructuraEliminatorias(rondaId: string, ganadorLocal: boolean, golesLocal: number, golesVisitante: number): void {
      // Actualizar los botones y habilitar siguientes rondas
      const botones = document.querySelectorAll('[onclick*="registrarResultadoEliminatoria"]');
      
      // Encontrar y deshabilitar el botón actual
      botones.forEach(btn => {
        const onclick = btn.getAttribute('onclick');
        if (onclick?.includes(rondaId)) {
          btn.textContent = `✅ ${golesLocal}-${golesVisitante}`;
          (btn as HTMLButtonElement).disabled = true;
          btn.classList.remove('btn-success', 'btn-warning', 'btn-primary');
          btn.classList.add('btn-secondary');
        }
      });
    }
    
    private habilitarSiguienteRonda(rondaId: string): void {
      // Lógica para habilitar la siguiente ronda basada en la ronda completada
      const rondaElementos = {
        'ronda-previa-1': 'ronda-previa-2',
        'ronda-previa-2': ['semifinal-1', 'semifinal-2'],
        'semifinal-1': ['tercer-lugar', 'final'],
        'semifinal-2': ['tercer-lugar', 'final']
      };
      
      const siguientesRondas = rondaElementos[rondaId as keyof typeof rondaElementos];
      
      if (siguientesRondas) {
        const rondas = Array.isArray(siguientesRondas) ? siguientesRondas : [siguientesRondas];
        
        rondas.forEach(siguienteRonda => {
          const botones = document.querySelectorAll('[onclick*="registrarResultadoEliminatoria"]');
          botones.forEach(btn => {
            const onclick = btn.getAttribute('onclick');
            if (onclick?.includes(siguienteRonda)) {
              (btn as HTMLButtonElement).disabled = false;
            }
          });
        });
      }
    }

    private actualizarGanadoresDependientes(rondaId: string): void {
      // Actualizar elementos de la UI que dependen de los resultados
      if (rondaId === 'ronda-previa-1') {
        // Actualizar el Partido 2 con el ganador del Partido 1
        this.actualizarGanadorPartido1();
      }
      
      // Aquí se pueden agregar más dependencias según la estructura del torneo
    }

    private actualizarGanadorPartido1(): void {
      const resultadoP1 = this.resultadosEliminatorias['ronda-previa-1'];
      if (!resultadoP1) return;

      const ganadorPartido1Element = document.getElementById('ganador-partido-1');
      if (!ganadorPartido1Element) return;

      // Obtener datos de los participantes del Partido 1
      const datosP1 = this.obtenerDatosRondaEliminatoria('ronda-previa-1');
      if (!datosP1) return;

      const ganadorNombre = resultadoP1.ganadorLocal ? datosP1.jugadorLocal : datosP1.jugadorVisitante;
      const ganadorEquipo = resultadoP1.ganadorLocal ? datosP1.equipoLocal : datosP1.equipoVisitante;
      
      // Actualizar el contenido con el ganador real
      ganadorPartido1Element.innerHTML = `
        <div class="text-green-400 font-bold">✅ ${ganadorNombre}</div>
        <div class="text-xs text-gray-400 mt-1">${ganadorEquipo}</div>
      `;

      // Cambiar la clase del contenedor para indicar que ya tiene ganador
      const participantContainer = ganadorPartido1Element.closest('.participant');
      if (participantContainer) {
        participantContainer.classList.remove('empty');
        participantContainer.classList.add('filled');
      }

      // Habilitar el botón del Partido 2
      const botonPartido2 = document.querySelector('[onclick*="ronda-previa-2"]') as HTMLButtonElement;
      if (botonPartido2) {
        botonPartido2.disabled = false;
      }
    }

    private actualizarVistaConResultadosEliminatorias(): void {
      // Actualizar la vista con todos los resultados cargados
      Object.keys(this.resultadosEliminatorias).forEach(rondaId => {
        this.actualizarGanadoresDependientes(rondaId);
      });
    }

    private actualizarVistaGrupos(): void {
      // Actualizar todas las tablas de grupos después de cargar datos
      console.log('Actualizando vista de grupos...');
      console.log('Clasificaciones antes de actualizar:', this.clasificaciones);
      
      this.actualizarClasificaciones();
      
      console.log('Clasificaciones después de actualizar:', this.clasificaciones);
      
      // Actualizar también estadísticas si existen partidos jugados
      const partidosJugados = this.partidos.filter(p => p.jugado);
      if (partidosJugados.length > 0) {
        console.log('Actualizando estadísticas para', partidosJugados.length, 'partidos jugados');
        this.actualizarEstadisticas();
      }
    }
  }

  // Inicializar
  let torneoManager: TorneoManager;
  document.addEventListener('DOMContentLoaded', () => {
    torneoManager = new TorneoManager();
    (window as any).torneoManager = torneoManager;
    
    // Funcionalidad de migración
    setupMigracionButtons();
  });

  // Configurar botones de migración
  function setupMigracionButtons() {
    const btnVerificar = document.getElementById('btn-verificar-localStorage') as HTMLButtonElement;
    const btnMigrar = document.getElementById('btn-migrar-todo') as HTMLButtonElement;

    if (btnVerificar) {
      btnVerificar.addEventListener('click', async () => {
        console.log('🔍 Verificando datos en localStorage...');
        
        const keys = ['torneoActivo', 'gruposConfig', 'jugadores', 'configuracion-torneo', 'ultimo-sorteo'];
        let datosEncontrados = false;
        let resumen = '📋 DATOS EN LOCALSTORAGE:\n\n';
        
        keys.forEach(key => {
          const valor = localStorage.getItem(key);
          if (valor) {
            try {
              const parsed = JSON.parse(valor);
              const tamaño = valor.length;
              resumen += `✅ ${key}: ${tamaño} caracteres\n`;
              datosEncontrados = true;
            } catch (e) {
              resumen += `✅ ${key}: ${valor.length} caracteres\n`;
              datosEncontrados = true;
            }
          } else {
            resumen += `❌ ${key}: No encontrado\n`;
          }
        });

        if (!datosEncontrados) {
          resumen += '\n🎉 No hay datos en localStorage\n✨ Todo está migrado o es la primera vez';
        } else {
          resumen += '\n💡 Usa "Migrar Todo" para mover estos datos a la base de datos';
        }

        alert(resumen);
      });
    }

    if (btnMigrar) {
      btnMigrar.addEventListener('click', async () => {
        if (confirm('¿Deseas migrar todos los datos de localStorage a la base de datos?\n\n⚠️ Los datos locales se eliminarán después de una migración exitosa.')) {
          try {
            btnMigrar.textContent = 'Migrando...';
            btnMigrar.disabled = true;
            
            // Migrar configuraciones
            const respConfig = await fetch('/api/configuraciones', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ action: 'migrar' })
            });
            
            // Migrar torneo
            const respTorneo = await fetch('/api/torneos', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ action: 'migrar' })
            });
            
            if (respConfig.ok && respTorneo.ok) {
              alert('✅ ¡Migración completa exitosa!\n\n🔄 Recargando página para actualizar datos...');
              location.reload();
            } else {
              alert('⚠️ Migración parcial completada\nRevisa la consola para más detalles');
            }
            
          } catch (error) {
            console.error('Error en migración:', error);
            alert('❌ Error en la migración\nRevisa la consola para más detalles');
          } finally {
            btnMigrar.textContent = 'Migrar Todo';
            btnMigrar.disabled = false;
          }
        }
      });
    }
  }

  // Limpiar recursos al salir de la página
  window.addEventListener('beforeunload', () => {
    if (torneoManager) {
      torneoManager.detenerVerificacionAutomatica();
    }
  });
</script>

<style>
  .input {
    @apply px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent;
  }

  .btn {
    @apply px-4 py-2 rounded-lg font-medium transition-all duration-200 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none;
  }

  .btn-primary {
    @apply bg-blue-600 hover:bg-blue-700 text-white;
  }

  .btn-secondary {
    @apply bg-gray-600 hover:bg-gray-700 text-white;
  }

  .btn-success {
    @apply bg-green-600 hover:bg-green-700 text-white;
  }

  .btn-warning {
    @apply bg-orange-600 hover:bg-orange-700 text-white;
  }

  /* Animaciones del modal */
  .modal-entrada {
    animation: modalEntrada 0.3s ease-out;
  }

  @keyframes modalEntrada {
    from {
      opacity: 0;
      transform: scale(0.95) translateY(-10px);
    }
    to {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }

  /* Efectos de hover mejorados */
  .partido-card:hover {
    transform: translateY(-2px);
    transition: all 0.3s ease;
  }

  /* Gradientes personalizados */
  .text-gradient {
    background: linear-gradient(45deg, #3b82f6, #10b981);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  /* Efecto de resplandor en inputs */
  input[type="number"]:focus {
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
  }

  /* Animación de pulso suave para el marcador */
  .marcador-pulso {
    animation: pulseSuave 2s infinite;
  }

  @keyframes pulseSuave {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.02); }
  }

  .btn-danger {
    @apply bg-red-600 hover:bg-red-700 text-white;
  }

  .btn-sm {
    @apply px-3 py-1 text-sm;
  }

  .btn-lg {
    @apply px-6 py-3 text-lg;
  }

  .tab-button {
    @apply px-6 py-3 text-gray-400 hover:text-white transition-colors border-b-2 border-transparent;
  }

  .tab-button.active {
    @apply text-white border-blue-500;
  }

  .tab-content {
    @apply transition-all duration-300;
  }

  /* Estilos para el bracket de eliminatorias */
  .bracket-preview {
    @apply space-y-6;
  }

  .bracket-rounds {
    min-height: 400px;
  }

  .bracket-round {
    @apply flex flex-col;
  }

  .bracket-match {
    @apply transition-all duration-200 hover:border-gray-500;
    min-height: 80px;
  }

  .match-participant {
    @apply py-2 px-2 rounded transition-colors;
  }

  .match-participant.filled {
    @apply bg-gray-600/50;
  }

  .match-participant.empty {
    @apply bg-gray-800/30 border border-dashed border-gray-600;
  }

  .match-vs {
    @apply border-l border-r border-gray-600 mx-2;
  }

  /* Estilos para estructura personalizada */
  .estructura-especial-6 {
    @apply space-y-8;
  }

  .ronda-section {
    @apply bg-gray-800/30 rounded-lg p-6;
  }

  .match-preview {
    @apply transition-all duration-200 hover:border-gray-500;
  }

  .participant {
    @apply flex-1 text-center p-3 rounded;
  }

  .participant.filled {
    @apply bg-gray-600/50;
  }

  .participant.empty {
    @apply bg-gray-800/50 border border-dashed border-gray-600;
  }

  .vs-indicator {
    @apply text-center px-4 flex flex-col items-center justify-center;
  }

  /* Estilos especiales para la final */
  .champion-container {
    animation: glow 3s ease-in-out infinite alternate;
  }

  @keyframes glow {
    from {
      box-shadow: 0 0 20px rgba(255, 215, 0, 0.3);
    }
    to {
      box-shadow: 0 0 40px rgba(255, 215, 0, 0.6), 0 0 60px rgba(255, 165, 0, 0.4);
    }
  }

  .champion-name {
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
  }

  .celebration-text {
    animation: bounce 2s infinite;
  }

  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateY(0);
    }
    40% {
      transform: translateY(-10px);
    }
    60% {
      transform: translateY(-5px);
    }
  }

  /* Gradientes mejorados */
  .bg-gradient-final {
    background: linear-gradient(135deg, 
      rgba(251, 191, 36, 0.2) 0%, 
      rgba(245, 158, 11, 0.2) 25%,
      rgba(217, 119, 6, 0.2) 50%,
      rgba(245, 158, 11, 0.2) 75%,
      rgba(251, 191, 36, 0.2) 100%
    );
  }

  /* Estilos para estadísticas */
  .stats-card {
    @apply transition-all duration-200 hover:scale-105 hover:shadow-lg;
  }

  .ranking-item {
    @apply transition-all duration-200 hover:bg-gray-600/50;
  }

  .bota-oro {
    animation: goldShine 3s ease-in-out infinite;
  }

  @keyframes goldShine {
    0%, 100% {
      box-shadow: 0 0 20px rgba(255, 215, 0, 0.4);
    }
    50% {
      box-shadow: 0 0 30px rgba(255, 215, 0, 0.8), 0 0 40px rgba(255, 165, 0, 0.6);
    }
  }

  .guantes-oro {
    animation: blueGlow 3s ease-in-out infinite;
  }

  @keyframes blueGlow {
    0%, 100% {
      box-shadow: 0 0 15px rgba(59, 130, 246, 0.4);
    }
    50% {
      box-shadow: 0 0 25px rgba(59, 130, 246, 0.7), 0 0 35px rgba(37, 99, 235, 0.5);
    }
  }

  /* Responsive bracket */
  @media (max-width: 768px) {
    .bracket-rounds {
      @apply flex-col space-y-6;
    }
    
    .bracket-round {
      @apply w-full;
    }

    .match-preview .flex {
      @apply flex-col space-y-2;
    }

    .vs-indicator {
      @apply px-2 py-2;
    }

    .champion-container {
      @apply p-4;
    }

    .champion-name {
      @apply text-2xl;
    }
  }
</style>
