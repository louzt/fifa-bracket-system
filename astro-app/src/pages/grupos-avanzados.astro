---
import Layout from '../layouts/Layout.astro';
import SectionHeader from '../components/SectionHeader.astro';
---

<Layout title="Grupos Avanzados - FIFA Tournament">
  <div class="container mx-auto px-6 py-8 min-h-screen">
    <SectionHeader 
      title="üèÜ Sistema de Grupos Avanzado" 
      subtitle="Configuraci√≥n autom√°tica seg√∫n cantidad de jugadores"
    />

    <!-- Panel de Migraci√≥n -->
    <div id="panel-migracion" class="bg-gradient-to-r from-yellow-800/20 to-orange-800/20 rounded-xl p-6 mb-8 border border-yellow-500/50">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-xl font-bold text-yellow-400">üîÑ Migraci√≥n a Base de Datos</h3>
        <button id="cerrar-migracion" class="text-gray-400 hover:text-white transition-colors">
          ‚úï
        </button>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
        <div class="space-y-2">
          <div class="flex items-center space-x-2">
            <span id="check-grupos-config" class="text-gray-400">‚è≥</span>
            <span>Configuraci√≥n de grupos en DB</span>
          </div>
        </div>
        <div id="estadisticas-migracion" class="bg-gray-800/50 rounded p-3">
          <div class="text-sm text-gray-400">Estado de migraci√≥n</div>
          <div id="estado-migracion" class="text-yellow-400">Verificando...</div>
        </div>
      </div>
      
      <div class="flex space-x-4">
        <button id="verificar-migracion" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded transition-colors">
          üîç Verificar Estado
        </button>
        <button id="migrar-datos" class="bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2 rounded transition-colors">
          üì§ Migrar a DB
        </button>
      </div>
    </div>

    <!-- Panel de Control -->
    <div class="bg-gradient-to-r from-slate-800 to-slate-900 rounded-xl p-6 mb-8 border border-blue-500/30">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <!-- Informaci√≥n Actual -->
        <div class="bg-slate-700/50 rounded-lg p-4">
          <h3 class="text-blue-400 font-bold mb-3 flex items-center">
            <span class="mr-2">üë•</span> Jugadores Registrados
          </h3>
          <div id="jugadores-info" class="text-2xl font-bold text-white">
            <span id="total-jugadores">0</span> jugadores
          </div>
          <div id="equipos-asignados" class="text-sm text-gray-400 mt-1">
            0 con equipos asignados
          </div>
        </div>

        <!-- Configuraci√≥n Autom√°tica -->
        <div class="bg-slate-700/50 rounded-lg p-4">
          <h3 class="text-green-400 font-bold mb-3 flex items-center">
            <span class="mr-2">‚öôÔ∏è</span> Configuraci√≥n √ìptima
          </h3>
          <div id="config-optima" class="text-white">
            <div id="num-grupos" class="text-lg font-semibold">- grupos</div>
            <div id="distribucion" class="text-sm text-gray-400">-</div>
          </div>
        </div>

        <!-- Fase de Eliminatorias -->
        <div class="bg-slate-700/50 rounded-lg p-4">
          <h3 class="text-purple-400 font-bold mb-3 flex items-center">
            <span class="mr-2">‚öîÔ∏è</span> Eliminatorias
          </h3>
          <div id="info-eliminatorias" class="text-white">
            <div id="clasificados" class="text-lg font-semibold">- clasificados</div>
            <div id="estructura-eliminatorias" class="text-sm text-gray-400">-</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Controles de Configuraci√≥n -->
    <div class="bg-slate-800/80 rounded-xl p-6 mb-8 border border-slate-600/50">
      <h2 class="text-xl font-bold text-white mb-4 flex items-center">
        <span class="mr-2">üõ†Ô∏è</span> Configuraci√≥n del Torneo
      </h2>
      
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <!-- Tipo de Grupos -->
        <div>
          <label class="block text-blue-400 font-semibold mb-2">Tipo de Grupos</label>
          <select id="tipo-grupos" class="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white">
            <option value="automatico">Autom√°tico</option>
            <option value="manual">Manual</option>
          </select>
        </div>

        <!-- Partidos de Grupo -->
        <div>
          <label class="block text-green-400 font-semibold mb-2">Partidos de Grupo</label>
          <select id="partidos-grupo" class="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white">
            <option value="ida">Solo Ida</option>
            <option value="ida-vuelta">Ida y Vuelta</option>
          </select>
        </div>

        <!-- Tipo de Eliminatorias -->
        <div>
          <label class="block text-purple-400 font-semibold mb-2">Eliminatorias</label>
          <select id="tipo-eliminatorias" class="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white">
            <option value="automatico">Autom√°tico</option>
            <option value="manual">Manual</option>
          </select>
        </div>

        <!-- Solo Selecciones -->
        <div>
          <label class="block text-yellow-400 font-semibold mb-2">Restricciones</label>
          <div class="space-y-2">
            <label class="flex items-center text-white">
              <input type="checkbox" id="solo-selecciones" class="mr-2 rounded bg-slate-700 border-slate-600">
              <span class="text-sm">Solo Selecciones</span>
            </label>
            <label class="flex items-center text-white">
              <input type="checkbox" id="permitir-duplicados" class="mr-2 rounded bg-slate-700 border-slate-600">
              <span class="text-sm">Permitir Duplicados</span>
            </label>
          </div>
        </div>
      </div>

      <div class="flex flex-wrap gap-3 mt-6">
        <button id="btn-generar-grupos" class="px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white rounded-lg font-semibold transition-all duration-300 shadow-lg hover:shadow-blue-500/25">
          üèÜ Generar Grupos
        </button>
        <button id="btn-simular-torneo" class="px-6 py-3 bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white rounded-lg font-semibold transition-all duration-300 shadow-lg hover:shadow-green-500/25">
          ‚öΩ Simular Torneo Completo
        </button>
        <button id="btn-guardar-config" class="px-6 py-3 bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 text-white rounded-lg font-semibold transition-all duration-300 shadow-lg hover:shadow-purple-500/25">
          üíæ Guardar Configuraci√≥n
        </button>
      </div>
    </div>

    <!-- Visualizaci√≥n de Grupos -->
    <div id="container-grupos" class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6 mb-8" style="display: none;">
      <!-- Los grupos se generar√°n din√°micamente aqu√≠ -->
    </div>

    <!-- Informaci√≥n de Partidos -->
    <div id="info-partidos" class="bg-slate-800/80 rounded-xl p-6 mb-8 border border-slate-600/50" style="display: none;">
      <h2 class="text-xl font-bold text-white mb-4 flex items-center">
        <span class="mr-2">‚öΩ</span> Fixture de Partidos
      </h2>
      <div id="lista-partidos" class="space-y-2">
        <!-- Partidos se generar√°n aqu√≠ -->
      </div>
    </div>

    <!-- Estructura de Eliminatorias -->
    <div id="preview-eliminatorias" class="bg-slate-800/80 rounded-xl p-6 border border-slate-600/50" style="display: none;">
      <h2 class="text-xl font-bold text-white mb-4 flex items-center">
        <span class="mr-2">‚öîÔ∏è</span> Vista Previa de Eliminatorias
      </h2>
      <div id="fases-eliminatorias" class="space-y-4">
        <!-- Fases de eliminatorias se generar√°n aqu√≠ -->
      </div>
    </div>

    <!-- Modal de Confirmaci√≥n -->
    <div id="modal-confirmacion" class="fixed inset-0 bg-black/50 flex items-center justify-center z-50" style="display: none;">
      <div class="bg-slate-800 rounded-xl p-6 max-w-md mx-4 border border-blue-500/30">
        <h3 class="text-xl font-bold text-white mb-4">üöÄ Iniciar Torneo</h3>
        <p class="text-gray-300 mb-6">¬øEst√° seguro que desea iniciar el torneo con la configuraci√≥n actual? Esta acci√≥n crear√° todos los partidos y no se podr√° deshacer.</p>
        <div class="flex gap-3">
          <button id="btn-cancelar" class="flex-1 px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white rounded-lg transition-colors">
            Cancelar
          </button>
          <button id="btn-confirmar" class="flex-1 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors">
            Confirmar
          </button>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { SistemaGrupos, mostrarInformacionSistema } from '../scripts/sistemaGrupos';
  import { SistemaEliminatorias, simularEliminatorias } from '../scripts/sistemaEliminatorias';
  import type { Jugador, ConfiguracionTorneo } from '../types/index';

  class GruposAvanzadosApp {
    private jugadores: Jugador[] = [];
    private configuracion: ConfiguracionTorneo = {
      tipoGrupos: 'automatico',
      partidosGrupo: 'ida',
      tipoEliminatorias: 'automatico',
      permitirDuplicados: false,
      soloSelecciones: false
    };
    private sistemaGrupos: SistemaGrupos | null = null;

    constructor() {
      this.inicializar();
    }

    private async inicializar(): Promise<void> {
      await this.cargarJugadores();
      this.configurarEventos();
      await this.cargarConfiguracion();
      this.actualizarInformacion();
    }

    private async cargarJugadores(): Promise<void> {
      try {
        const response = await fetch('/api/jugadores');
        const data = await response.json();
        this.jugadores = data.filter((j: Jugador) => j.equipo); // Solo jugadores con equipo
        console.log('‚úÖ Jugadores cargados:', this.jugadores.length);
      } catch (error) {
        console.error('‚ùå Error cargando jugadores:', error);
        this.jugadores = [];
      }
    }

    private configurarEventos(): void {
      // Configuraci√≥n
      const tipoGrupos = document.getElementById('tipo-grupos') as HTMLSelectElement;
      const partidosGrupo = document.getElementById('partidos-grupo') as HTMLSelectElement;
      const tipoEliminatorias = document.getElementById('tipo-eliminatorias') as HTMLSelectElement;
      const soloSelecciones = document.getElementById('solo-selecciones') as HTMLInputElement;
      const permitirDuplicados = document.getElementById('permitir-duplicados') as HTMLInputElement;

      // Eventos de cambio de configuraci√≥n
      [tipoGrupos, partidosGrupo, tipoEliminatorias].forEach(element => {
        element?.addEventListener('change', () => {
          this.actualizarConfiguracion();
          this.actualizarInformacion();
        });
      });

      [soloSelecciones, permitirDuplicados].forEach(element => {
        element?.addEventListener('change', () => {
          this.actualizarConfiguracion();
          this.actualizarInformacion();
        });
      });

      // Botones
      document.getElementById('btn-generar-grupos')?.addEventListener('click', () => {
        this.generarGrupos();
      });

      document.getElementById('btn-simular-torneo')?.addEventListener('click', () => {
        this.mostrarModalConfirmacion();
      });

      document.getElementById('btn-guardar-config')?.addEventListener('click', () => {
        this.guardarConfiguracion();
      });

      // Modal
      document.getElementById('btn-cancelar')?.addEventListener('click', () => {
        this.ocultarModal();
      });

      document.getElementById('btn-confirmar')?.addEventListener('click', () => {
        this.simularTorneoCompleto();
      });
    }

    private actualizarConfiguracion(): void {
      const tipoGrupos = document.getElementById('tipo-grupos') as HTMLSelectElement;
      const partidosGrupo = document.getElementById('partidos-grupo') as HTMLSelectElement;
      const tipoEliminatorias = document.getElementById('tipo-eliminatorias') as HTMLSelectElement;
      const soloSelecciones = document.getElementById('solo-selecciones') as HTMLInputElement;
      const permitirDuplicados = document.getElementById('permitir-duplicados') as HTMLInputElement;

      this.configuracion = {
        tipoGrupos: tipoGrupos?.value as 'automatico' | 'manual' || 'automatico',
        partidosGrupo: partidosGrupo?.value as 'ida' | 'ida-vuelta' || 'ida',
        tipoEliminatorias: tipoEliminatorias?.value as 'automatico' | 'manual' || 'automatico',
        permitirDuplicados: permitirDuplicados?.checked || false,
        soloSelecciones: soloSelecciones?.checked || false
      };
    }

    private async cargarConfiguracion(): Promise<void> {
      try {
        const response = await fetch('/api/configuraciones');
        if (response.ok) {
          const configuraciones = await response.json();
          const configGrupos = configuraciones.find((c: any) => c.clave === 'gruposConfig');
          if (configGrupos) {
            this.configuracion = { ...this.configuracion, ...JSON.parse(configGrupos.valor) };
            this.aplicarConfiguracionUI();
          }
        }
      } catch (error) {
        console.error('Error al cargar configuraci√≥n desde DB:', error);
        // Fallback a localStorage
        try {
          const configGuardada = localStorage.getItem('gruposConfig');
          if (configGuardada) {
            this.configuracion = { ...this.configuracion, ...JSON.parse(configGuardada) };
            this.aplicarConfiguracionUI();
            console.log('Configuraci√≥n cargada desde localStorage como fallback');
          }
        } catch (fallbackError) {
          console.error('Error en fallback localStorage:', fallbackError);
        }
      }
    }

    private aplicarConfiguracionUI(): void {
      const tipoGrupos = document.getElementById('tipo-grupos') as HTMLSelectElement;
      const partidosGrupo = document.getElementById('partidos-grupo') as HTMLSelectElement;
      const tipoEliminatorias = document.getElementById('tipo-eliminatorias') as HTMLSelectElement;
      const soloSelecciones = document.getElementById('solo-selecciones') as HTMLInputElement;
      const permitirDuplicados = document.getElementById('permitir-duplicados') as HTMLInputElement;

      if (tipoGrupos) tipoGrupos.value = this.configuracion.tipoGrupos;
      if (partidosGrupo) partidosGrupo.value = this.configuracion.partidosGrupo;
      if (tipoEliminatorias) tipoEliminatorias.value = this.configuracion.tipoEliminatorias;
      if (soloSelecciones) soloSelecciones.checked = this.configuracion.soloSelecciones;
      if (permitirDuplicados) permitirDuplicados.checked = this.configuracion.permitirDuplicados;
    }

    private actualizarInformacion(): void {
      const totalJugadores = this.jugadores.length;
      const equiposAsignados = this.jugadores.filter(j => j.equipo).length;

      // Actualizar informaci√≥n b√°sica
      const totalElement = document.getElementById('total-jugadores');
      const equiposElement = document.getElementById('equipos-asignados');
      
      if (totalElement) totalElement.textContent = totalJugadores.toString();
      if (equiposElement) equiposElement.textContent = `${equiposAsignados} con equipos asignados`;

      if (totalJugadores >= 4) {
        this.sistemaGrupos = new SistemaGrupos(this.jugadores, this.configuracion);
        const info = this.sistemaGrupos.obtenerInformacionCompleta();
        
        // Actualizar configuraci√≥n √≥ptima
        const numGruposElement = document.getElementById('num-grupos');
        const distribucionElement = document.getElementById('distribucion');
        
        if (numGruposElement) {
          numGruposElement.textContent = `${info.grupos.length} grupos`;
        }
        if (distribucionElement) {
          const distribucion = info.grupos.map((g: any) => `${g.capacidad} jugadores`).join(', ');
          distribucionElement.textContent = distribucion;
        }

        // Actualizar eliminatorias
        const clasificadosElement = document.getElementById('clasificados');
        const estructuraElement = document.getElementById('estructura-eliminatorias');
        
        if (clasificadosElement) {
          clasificadosElement.textContent = `${info.clasificacion.clasificados} clasificados`;
        }
        if (estructuraElement) {
          estructuraElement.textContent = info.eliminatorias.descripcion;
        }
      }
    }

    private generarGrupos(): void {
      if (!this.sistemaGrupos) {
        alert('No hay suficientes jugadores para generar grupos');
        return;
      }

      const info = this.sistemaGrupos.obtenerInformacionCompleta();
      this.mostrarGrupos(info.grupos);
      this.mostrarPartidos(info.partidos);
      this.mostrarPreviewEliminatorias(info.eliminatorias);
    }

    private mostrarGrupos(grupos: any[]): void {
      const container = document.getElementById('container-grupos');
      if (!container) return;

      container.innerHTML = '';
      container.style.display = 'grid';

      grupos.forEach((grupo, index) => {
        const grupoElement = document.createElement('div');
        grupoElement.className = 'bg-gradient-to-br from-slate-700 to-slate-800 rounded-xl p-6 border border-blue-500/30';
        
        const jugadoresHtml = grupo.jugadores.map((jugadorId: string) => {
          const jugador = this.jugadores.find(j => j._id === jugadorId);
          const equipo = typeof jugador?.equipo === 'string' ? jugador.equipo : jugador?.equipo?.nombre;
          return `
            <div class="flex items-center justify-between p-3 bg-slate-600/50 rounded-lg">
              <span class="text-white font-medium">${jugador?.nombre || 'N/A'}</span>
              <span class="text-blue-400 text-sm">${equipo || 'Sin equipo'}</span>
            </div>
          `;
        }).join('');

        grupoElement.innerHTML = `
          <h3 class="text-xl font-bold text-white mb-4 flex items-center">
            <span class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white font-bold mr-3">
              ${String.fromCharCode(65 + index)}
            </span>
            ${grupo.nombre}
          </h3>
          <div class="space-y-3">
            ${jugadoresHtml}
          </div>
          <div class="mt-4 text-sm text-gray-400">
            ${grupo.jugadores.length} jugadores ‚Ä¢ ${this.calcularPartidosGrupo(grupo.jugadores.length)} partidos
          </div>
        `;
        
        container.appendChild(grupoElement);
      });
    }

    private mostrarPartidos(partidos: any[]): void {
      const container = document.getElementById('info-partidos');
      const lista = document.getElementById('lista-partidos');
      if (!container || !lista) return;

      container.style.display = 'block';
      lista.innerHTML = '';

      const partidosPorGrupo = partidos.reduce((acc, partido) => {
        const grupo = partido.grupo || 'Sin grupo';
        if (!acc[grupo]) acc[grupo] = [];
        acc[grupo].push(partido);
        return acc;
      }, {} as any);

      Object.entries(partidosPorGrupo).forEach(([grupo, partidosGrupo]: [string, any]) => {
        const grupoElement = document.createElement('div');
        grupoElement.className = 'bg-slate-700/50 rounded-lg p-4 mb-4';
        
        const partidosHtml = (partidosGrupo as any[]).map(partido => {
          const jugador1 = this.jugadores.find(j => j._id === partido.jugador1);
          const jugador2 = this.jugadores.find(j => j._id === partido.jugador2);
          return `
            <div class="flex items-center justify-between p-2 bg-slate-600/30 rounded">
              <span class="text-white">${jugador1?.nombre || 'N/A'}</span>
              <span class="text-gray-400">vs</span>
              <span class="text-white">${jugador2?.nombre || 'N/A'}</span>
              <span class="text-xs text-blue-400">J${partido.jornada || 1}</span>
            </div>
          `;
        }).join('');

        grupoElement.innerHTML = `
          <h4 class="text-blue-400 font-bold mb-3">${grupo}</h4>
          <div class="space-y-2">
            ${partidosHtml}
          </div>
        `;
        
        lista.appendChild(grupoElement);
      });
    }

    private mostrarPreviewEliminatorias(eliminatorias: any): void {
      const container = document.getElementById('preview-eliminatorias');
      const fases = document.getElementById('fases-eliminatorias');
      if (!container || !fases) return;

      container.style.display = 'block';
      fases.innerHTML = `
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div class="bg-slate-700/50 rounded-lg p-4">
            <h4 class="text-purple-400 font-bold mb-2">üìä Estructura</h4>
            <p class="text-white">${eliminatorias.descripcion}</p>
            <p class="text-gray-400 text-sm mt-2">${eliminatorias.partidos} partidos totales</p>
          </div>
          <div class="bg-slate-700/50 rounded-lg p-4">
            <h4 class="text-green-400 font-bold mb-2">üèÜ Fases</h4>
            <div class="space-y-1">
              ${eliminatorias.fases.map((fase: string) => `
                <div class="text-white text-sm">‚Ä¢ ${fase}</div>
              `).join('')}
            </div>
          </div>
          <div class="bg-slate-700/50 rounded-lg p-4">
            <h4 class="text-yellow-400 font-bold mb-2">‚öôÔ∏è Configuraci√≥n</h4>
            <p class="text-white text-sm">Partidos: ${this.configuracion.partidosGrupo}</p>
            <p class="text-white text-sm">Eliminatorias: ${this.configuracion.tipoEliminatorias}</p>
          </div>
        </div>
      `;
    }

    private calcularPartidosGrupo(numJugadores: number): number {
      const partidosIda = (numJugadores * (numJugadores - 1)) / 2;
      return this.configuracion.partidosGrupo === 'ida-vuelta' ? partidosIda * 2 : partidosIda;
    }

    private mostrarModalConfirmacion(): void {
      const modal = document.getElementById('modal-confirmacion');
      if (modal) modal.style.display = 'flex';
    }

    private ocultarModal(): void {
      const modal = document.getElementById('modal-confirmacion');
      if (modal) modal.style.display = 'none';
    }

    private async simularTorneoCompleto(): Promise<void> {
      this.ocultarModal();
      
      if (!this.sistemaGrupos) {
        alert('Genere primero los grupos');
        return;
      }

      try {
        const info = this.sistemaGrupos.obtenerInformacionCompleta();
        
        // Crear partidos en la base de datos
        const response = await fetch('/api/partidos', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            partidos: info.partidos,
            configuracion: this.configuracion
          })
        });

        if (response.ok) {
          alert('üéâ ¬°Torneo creado exitosamente! Los partidos han sido generados.');
          window.location.href = '/grupos';
        } else {
          alert('‚ùå Error al crear el torneo');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('‚ùå Error al crear el torneo');
      }
    }

    private async guardarConfiguracion(): Promise<void> {
      try {
        const response = await fetch('/api/configuraciones', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            clave: 'gruposConfig',
            valor: JSON.stringify(this.configuracion),
            tipo: 'configuracion'
          })
        });

        if (!response.ok) {
          throw new Error(`Error HTTP: ${response.status}`);
        }

        alert('‚úÖ Configuraci√≥n guardada en base de datos');
        console.log('Configuraci√≥n guardada en DB');
      } catch (error) {
        console.error('Error al guardar configuraci√≥n en DB:', error);
        // Fallback a localStorage
        localStorage.setItem('gruposConfig', JSON.stringify(this.configuracion));
        alert('‚úÖ Configuraci√≥n guardada (localStorage)');
        console.log('Configuraci√≥n guardada en localStorage como fallback');
      }
    }
  }

  // Funciones de migraci√≥n
  async function verificarEstadoMigracion() {
    const checkGruposConfig = document.getElementById('check-grupos-config')!;
    const estadoMigracion = document.getElementById('estado-migracion')!;

    try {
      // Verificar configuraci√≥n de grupos en DB
      const response = await fetch('/api/configuraciones');
      if (response.ok) {
        const configuraciones = await response.json();
        const gruposConfig = configuraciones.find((c: any) => c.clave === 'gruposConfig');
        
        if (gruposConfig) {
          checkGruposConfig.textContent = '‚úÖ';
          checkGruposConfig.className = 'text-green-400';
        } else {
          checkGruposConfig.textContent = '‚ùå';
          checkGruposConfig.className = 'text-red-400';
        }
      }

      // Verificar localStorage
      const gruposConfigLocal = localStorage.getItem('gruposConfig');
      
      if (!gruposConfigLocal) {
        estadoMigracion.textContent = 'Sin datos para migrar';
        estadoMigracion.className = 'text-green-400';
      } else {
        estadoMigracion.textContent = 'Datos pendientes de migraci√≥n';
        estadoMigracion.className = 'text-yellow-400';
      }

    } catch (error) {
      console.error('Error al verificar migraci√≥n:', error);
      estadoMigracion.textContent = 'Error en verificaci√≥n';
      estadoMigracion.className = 'text-red-400';
    }
  }

  async function migrarDatos() {
    const estadoMigracion = document.getElementById('estado-migracion')!;
    estadoMigracion.textContent = 'Migrando...';
    estadoMigracion.className = 'text-blue-400';

    try {
      // Migrar configuraci√≥n de grupos
      const gruposConfigLocal = localStorage.getItem('gruposConfig');
      if (gruposConfigLocal) {
        const response = await fetch('/api/configuraciones', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            clave: 'gruposConfig',
            valor: gruposConfigLocal,
            tipo: 'configuracion'
          })
        });

        if (!response.ok) {
          throw new Error('Error al migrar configuraci√≥n de grupos');
        }
      }

      estadoMigracion.textContent = 'Migraci√≥n completada';
      estadoMigracion.className = 'text-green-400';
      
      // Verificar nuevamente
      setTimeout(() => {
        verificarEstadoMigracion();
      }, 1000);

    } catch (error) {
      console.error('Error durante migraci√≥n:', error);
      estadoMigracion.textContent = 'Error en migraci√≥n';
      estadoMigracion.className = 'text-red-400';
    }
  }

  function setupMigracionButtons() {
    const verificarBtn = document.getElementById('verificar-migracion');
    const migrarBtn = document.getElementById('migrar-datos');
    const cerrarBtn = document.getElementById('cerrar-migracion');
    const panel = document.getElementById('panel-migracion');

    verificarBtn?.addEventListener('click', verificarEstadoMigracion);
    migrarBtn?.addEventListener('click', migrarDatos);
    cerrarBtn?.addEventListener('click', () => {
      panel?.style.setProperty('display', 'none');
    });

    // Verificar estado inicial
    verificarEstadoMigracion();
  }

  // Inicializar la aplicaci√≥n cuando el DOM est√© listo
  document.addEventListener('DOMContentLoaded', () => {
    new GruposAvanzadosApp();
    setupMigracionButtons();
  });
</script>

<style>
  /* Animaciones para las transiciones */
  #container-grupos > div {
    animation: slideInUp 0.6s ease-out forwards;
  }

  #container-grupos > div:nth-child(2) {
    animation-delay: 0.1s;
  }

  #container-grupos > div:nth-child(3) {
    animation-delay: 0.2s;
  }

  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Efectos hover mejorados */
  button:hover {
    transform: translateY(-2px);
  }

  /* Scrollbar personalizado */
  ::-webkit-scrollbar {
    width: 8px;
  }

  ::-webkit-scrollbar-track {
    background: rgb(51, 65, 85);
  }

  ::-webkit-scrollbar-thumb {
    background: rgb(59, 130, 246);
    border-radius: 4px;
  }
</style>
</Layout>
